[
    {
        "id": "1b02f0fe7a46b56d",
        "type": "tab",
        "label": "MULS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3e10f12a381c462c",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "Intro - Email",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "fill-opacity": "0.5"
        },
        "nodes": [
            "5cf3a44df0489cc3",
            "f121367360a20587",
            "ebcd1f406c1e9e3c",
            "877b93258fb34a07",
            "58ab483613b22c99",
            "c7e7116cb32742f2",
            "eab1462b55a1b1ca",
            "201401b3b8a2e8b1"
        ],
        "x": 14,
        "y": 19,
        "w": 1092,
        "h": 262
    },
    {
        "id": "ca7e48983955817c",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "New Account",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "e36c85ad5fa2da1f",
            "a9e9c57981695b32",
            "3b4dd55b17e5144c",
            "59f0f10230ea8f86",
            "b7bbbe75cf064b7a",
            "46590fd607fbf6bb",
            "1e6ef5e1ec656162",
            "5b803fa961075717",
            "98b6c607bf54ac9b",
            "d4e71802ca6f9b9e",
            "18625af9615e73d1",
            "0ced750abad2e475",
            "de7d61fe54078f54",
            "2722df8764f86cdc",
            "a65151249ef573ae",
            "68f7acbefe6ee986",
            "7ba798a4793b928e"
        ],
        "x": 14,
        "y": 959,
        "w": 1382,
        "h": 202
    },
    {
        "id": "1bde416b48c60f5a",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "Login",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "d3fb19f179346823",
            "30fb944edc5e1e88",
            "608d50102e400b90",
            "3fbcf2c7ad9cda7b",
            "95cae5333118865e",
            "76602fa7ee1b67bb",
            "22b646be5133ddf7",
            "3668a6e5a63a99dc",
            "be20eb6f931b03cb",
            "209fc8d432b02b6f",
            "ca5d742844a46cff",
            "48fd1c5bece7a78c",
            "58ecbc5478dc34f0",
            "0cad90d8f7c50503",
            "aa9efcce2a2b2749",
            "290acac040a26422",
            "2e76aef6f90b29fa",
            "66d26836989c03d6",
            "6a521a0e27ad649c",
            "4c50afc94b8b43a5",
            "bb4097761e757ed6",
            "cb4dad6e5d98ac2e",
            "78a57622081d8542",
            "d6acea491b49d1a8",
            "a6f65e1e1721558f",
            "beacedf613f5f44f",
            "c9fc0f842a6d41b3",
            "4870e32402220f6b",
            "5dc858f8ea837d74",
            "0325a4b64f023a65",
            "4986ea0f8d3443cc",
            "669f8ff4d0e2aeeb",
            "0c3977fbcdb4257e",
            "5b46ac5e6e426938",
            "bb292d942af2420d",
            "4996ad2ab7df7464",
            "7866e6af042b1d77",
            "e7d1848f601dba35",
            "87f633a770c22943",
            "0ac54449ae16940d",
            "5c3ad057718af50a",
            "20d3ad533f609f73",
            "f16b5872a53fd27e",
            "ea13c9fdf17bca7a",
            "e99a8e31b9bb4926",
            "c4e386b49d869f71",
            "07c30b7ec8d19009",
            "d1b3e7fe677fa287",
            "ef51b1fe73c78d66",
            "cc114125f68f77f3",
            "424b94baf58e485d",
            "5fb366f23a1bda5e",
            "8b05b7ee2d56b4cd",
            "83f0dc30033ef6f8",
            "89f051a2afd5953a"
        ],
        "x": 14,
        "y": 299,
        "w": 1392,
        "h": 642
    },
    {
        "id": "c4d922530d53fcab",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "Account",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "555c305b917a4337",
            "19cf7a43d27805d7",
            "5ee64bcbbba655d7",
            "0adfab45e8bbf5e0",
            "3ef53165947c2d33",
            "34d08f9ce3070add",
            "62e8fb24a8384fca",
            "8b817cee5c5be0e5",
            "bb64670df6f0d585",
            "38deed390506f8c3",
            "f4599678c89675c6",
            "e8708a7f1345c858",
            "f338cf380901f28d",
            "73d91c1153aab875",
            "50a232caa967814d",
            "fd98cf6bc77bf4d1",
            "220e877d391bfd29",
            "e5ef009fb931a1cf",
            "21124f9be7897213",
            "d8a489d42eda16db",
            "23abfec4fcda01f7",
            "51e4b718a1610c2d",
            "b5d0cc481e475dca",
            "60601908cc6a35b2",
            "95573606db58bd79",
            "090acfa9120dcef6",
            "b6b6f93ce1da4556",
            "dfdad9593a532925",
            "c15b127c89e30c4d",
            "c8e90e94d0feab70",
            "32968f3824dc6dd0",
            "e7815e2edcf92344",
            "7491d5ba92388f79",
            "c7bf4de8a2d72b35",
            "17deb4bbfe55054c",
            "0c32151cb7188d6b",
            "c94a2df3c0504fa2",
            "a46d8c45e65915e7",
            "3e7ffea5bac6206f",
            "94d1d442a1c87344",
            "cb0defecd52aa9b0",
            "fcc30cbb90cd1ad3",
            "77990b5937c654ed",
            "c96fc492e0b05fb3",
            "5e26a5a26bc85446",
            "25e76ee035baf371",
            "7e4013e59864df21",
            "f3c1648329e213f6",
            "ae471445d670da7e",
            "f74c3ea69a761a9a",
            "9cd7587cbf687aa4",
            "9703c636f57f69ca",
            "f829b59a04ae7633",
            "346c8e3d75f48ef5",
            "e0f17b9b7c340479",
            "8739e523ed27f1f5",
            "1078789b2fae41fa"
        ],
        "x": 14,
        "y": 1439,
        "w": 1382,
        "h": 582
    },
    {
        "id": "962df86914dec9af",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "Account Recovery",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "7235826e9a5606ef",
            "a9819f76333696b6",
            "49cb288e92fd91e8",
            "f4ada1fa8abee9e4",
            "c61bd3af60b05a5e",
            "8ff71cba7e6f5572",
            "45a03b112e2804c1",
            "1700e38675e62efe",
            "4b45281ec01cbe0c",
            "90d3b5663f472e2b",
            "7a3fe3bf8d8e8262",
            "6e94372b577dda37",
            "8f77b4be6042a201",
            "f10c74c9c8445819",
            "12a9a92b41c516c5",
            "d071990140b9c7f6",
            "c14e4d201acf9333",
            "f1e7fea4ae1d8693",
            "2be544d1864b1018",
            "afa2855a91c5e221",
            "af2191887add8365"
        ],
        "x": 14,
        "y": 1179,
        "w": 1382,
        "h": 242
    },
    {
        "id": "51f60ce03cc73925",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "Admin",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "600cab8d95957293",
            "e1c5f8c1c403bbb7",
            "f460a730d4916f63",
            "20a071bac18ef06e",
            "13f057cd80e9ef78",
            "7b9ff3db8a32445f",
            "3f90f4ec748628b7",
            "80c14ec0f2479763",
            "a7421248134007eb",
            "df97ba5117bdbcfb",
            "8f33b1031f038fc0",
            "3378546afc92fba8",
            "56d1446bf5d51e8a",
            "ceef754846ef9ad8",
            "8c0bd244b4696997",
            "2bae77fcb36496e9",
            "ca2d22be425eeba4",
            "7e212da44eaa8b71",
            "f6bfae6cd25c1b78",
            "f29a2207a65a718d",
            "18c015ba05216832",
            "f1badb1b4536d8b0",
            "2381dfdde2c4d250",
            "5c5eec17bc433818",
            "aca87b04b1b3d63d",
            "8d2fe966ba746dc9",
            "a773cf4404de8c5d",
            "4f573273d2b56831",
            "5e1384528facbc51",
            "562f14056326d20b",
            "8b870f53df200d32",
            "895122333754fb8c",
            "fafccda7a16f86fe",
            "a95e8e40a862781f",
            "ec6fcb0f024fac3c",
            "e68cad80cb16c2fc",
            "a45844ff29915366",
            "244d3739aaa00263",
            "18f75bf0cd39e02a",
            "da01a9a1225c522a",
            "f47778c794ad3148",
            "d21d998a59f46877",
            "cd18585813ef8539",
            "d08e85a47dd562a0",
            "f2e2a97a5058b270",
            "23716de14af550ba",
            "a86bb42659a10d45",
            "6106117df2ccc632",
            "9016786aa2ee0433",
            "ba37d07258afcc96",
            "980bda83d39f66e8",
            "21ceed3f0888fba0",
            "85e33e6e90930a5f",
            "f13d58a6de25ba0f",
            "75992cb64fab12d0",
            "102d1828fbb546b8",
            "6786ea5377e8e8e5",
            "5ba796f1a1b9dddd",
            "7e73bcbd53ef66db",
            "33c27651d1e15310",
            "fa01a1cb98768777",
            "1863badd1485a4ea",
            "386377d666124896",
            "c9441717250c0942",
            "d3c9b1c6e7ab79d4",
            "6d66697209b4c50f",
            "d8bce40dc5b648ba",
            "d97c0f9a729d6ad5",
            "955f785a51408b17",
            "15d08b64e2fe796d",
            "426102e541d0a679",
            "2f774965f185c006",
            "3124f87f4965bf03",
            "b087b61086f7d7cd",
            "f02bc44dd3aa1ff7",
            "1fb7cfd6c52589d3",
            "297901a6171c7f6e",
            "0be796f6cacfaa53",
            "896c3130ceab8c04",
            "1a9ab1cfaf6a4a7c",
            "588cad345c265809",
            "ca4ee0d3b308ab28",
            "86c3c18b7c1bc69a",
            "9286f47a87957652",
            "c5212e1b81e39d92",
            "4b9ad5535a3e4106",
            "0c9d70cbf4009132",
            "9d88b4fe54f7162d",
            "396b8c3036909234",
            "25b9af446bacbb34",
            "6ecb37ef98f6ba09",
            "e0500f0e84cec724",
            "0d86b4194219bad3",
            "900c96e760b84964",
            "b006c249d20d35ce",
            "f8f151e46ceb5b8b",
            "315be2de79516d51",
            "b819e2cbb08679d2",
            "35204c71f459be6c",
            "3abcfc5ab82ad5c8",
            "51c353540a436ef3",
            "3896f065c034df78",
            "cfca8a83b138b713",
            "507647de55a4797a",
            "cdec4ed8f48bb007",
            "cfe0c164334209a7",
            "c7c43557f77a453e",
            "f899738da9c0041e",
            "1189a7597cd90650",
            "ac154a37ca4f1f9b",
            "80e53364790cf28c",
            "8f8f72d64c3dbc89",
            "0ec60495c59599c0",
            "f69ad9d0de74b07d",
            "222a1d0dbfb25799",
            "610fa4d7f50da562",
            "5deb6aedfedcfc43",
            "4c274864816c3737",
            "a44868a3b918d540",
            "523d9e3ef54da0a3",
            "57dcab9385da960d",
            "e76702e631ca2887",
            "6bc762980ef1693e",
            "628f69f69c34f79d",
            "7273ddb36c13c5de",
            "981b7a56ac289c91",
            "940dfdc9b1f8fad3",
            "5a247894413fb589",
            "5628cb1ed6e35a39",
            "d773e77edd49a009",
            "7d1ce19412f9a572",
            "f184070ee8a0ac02",
            "430a37d10753eb31",
            "1ba3ba07baeaa285",
            "8ea74676b7c2b79e",
            "ab9321a6d19c53d1",
            "5fd0cded7cac6802"
        ],
        "x": 14,
        "y": 2039,
        "w": 1432,
        "h": 1202
    },
    {
        "id": "ed444964b4b424e7",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "Startup",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "8752f4c3921ebeaf",
            "a9f4a28b31572f7f",
            "3354d566b3da04ad",
            "1f2d6d5acf7b4edc",
            "a807e430a329ee15",
            "2e9cc36906198122",
            "a606a6b474386326",
            "607133395ea78f4c",
            "6ad13d8ae48010ec",
            "c6b2a63f9aa1e0a8",
            "7137b2bc13f14804",
            "f40be573b0da39df",
            "0d1bd37488ea0ba8",
            "41a647f295cc807c",
            "87c0e22176ae266d",
            "72a230e3f11abf0b",
            "04919a3b8f503a9a",
            "d5af879def4fafbf",
            "507cdd6675871d76",
            "30d77718e4d2ef83",
            "cfa2c8afefa74c64",
            "f521241b88a78e18",
            "8e4e78fe052f805b",
            "b59f0dbf9b4662ef",
            "c31ccb3432429d3c",
            "f59eb7290e4d7764",
            "e12b7e8c7d68d258",
            "616dd0f7ea68eef7",
            "8afa7bda6aa47b9f"
        ],
        "x": 14,
        "y": 3559,
        "w": 1412,
        "h": 322
    },
    {
        "id": "73706228b7209d71",
        "type": "group",
        "z": "1b02f0fe7a46b56d",
        "name": "Automation",
        "style": {
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "cffec48c02a555f1",
            "daacc2e93c14f22b",
            "76a5ff59cbe2f003",
            "1a0680c54c8c94a9",
            "95f3d1553bf5cba8",
            "d8b86555ca5913c7",
            "db99c38650c42f07",
            "632740be00e55b73",
            "616debf1d957ef57",
            "cb5f2af957bda590",
            "b152887edfad9926",
            "5b34202fd14beff9",
            "032f5091444cb25f",
            "3c46b39f1d36d6e3",
            "1dcf80ab4cec30d4"
        ],
        "x": 14,
        "y": 3259,
        "w": 1192,
        "h": 282
    },
    {
        "id": "d3fb19f179346823",
        "type": "ui_form",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Form for entering userName and userPassword",
        "label": "",
        "group": "f5f7cada415a15e8",
        "order": 2,
        "width": 6,
        "height": 3,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": ""
        },
        "payload": "",
        "submit": "LOGIN",
        "cancel": "",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 240,
        "y": 580,
        "wires": [
            [
                "78a57622081d8542"
            ]
        ]
    },
    {
        "id": "30fb944edc5e1e88",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 380,
        "wires": []
    },
    {
        "id": "608d50102e400b90",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "AuthLoginCredentials",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst authSettings = global.get('authSettings');\nconst params = msg.params || {};\n\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n\n\n//clean up AuthLoginCredentials so it does not overflow.\n//Set length of AuthLoginCredentials object, \n//Rather how many supported users at a time from authSettings.muiLogin.maxSocketips\nvar AuthLoginCredentialsMaxLength = authSettings.muiLogin.maxSocketips;\n//get keys AuthLoginCredentials object \nvar AuthLoginCredentialsKeys = Object.keys(AuthLoginCredentials);\n//get length of AuthLoginCredentials object \nvar AuthLoginCredentialsLength = AuthLoginCredentialsKeys.length;\n//remove 2 items from Credentials if > AuthLoginCredentialsMaxLength\nif (AuthLoginCredentialsLength > AuthLoginCredentialsMaxLength)\n{   \n    delete AuthLoginCredentials[AuthLoginCredentialsKeys[0]];\n    delete AuthLoginCredentials[AuthLoginCredentialsKeys[1]];\n}\n\n\n\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['ip'] = socketip;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['ip'] = socketip;\n}\n\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n\n//msg.AuthLoginCredentials = AuthLoginCredentials;\n//msg.AuthLoginCredentialsKeys = AuthLoginCredentialsKeys;\n//msg.AuthLoginCredentialsMaxLength = AuthLoginCredentialsMaxLength;\n//msg.AuthLoginCredentialsLength = AuthLoginCredentialsLength;\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 380,
        "wires": [
            [
                "30fb944edc5e1e88"
            ]
        ]
    },
    {
        "id": "3fbcf2c7ad9cda7b",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "msg.name == Login [only track users that come to Login]",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Login",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 380,
        "wires": [
            [
                "95cae5333118865e"
            ]
        ]
    },
    {
        "id": "95cae5333118865e",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 380,
        "wires": [
            [
                "608d50102e400b90"
            ]
        ]
    },
    {
        "id": "76602fa7ee1b67bb",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "msg.payload == lost",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "lost",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 500,
        "wires": [
            [
                "22b646be5133ddf7"
            ]
        ]
    },
    {
        "id": "22b646be5133ddf7",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 500,
        "wires": [
            [
                "290acac040a26422",
                "3668a6e5a63a99dc"
            ]
        ]
    },
    {
        "id": "3668a6e5a63a99dc",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Remove Credentials",
        "func": "const socketid = msg.socketid;\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar admingSelections = global.get('admingSelections')||{};\n//RemoveAuthLoginCredentials when user is lost\ndelete AuthLoginCredentials[socketid];\ndelete admingSelections[socketid];\n\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nglobal.set('admingSelections', admingSelections);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n//msg.AuthLoginCredentials = AuthLoginCredentials;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "be20eb6f931b03cb"
            ]
        ]
    },
    {
        "id": "be20eb6f931b03cb",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 500,
        "wires": []
    },
    {
        "id": "209fc8d432b02b6f",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "msg.payload == connect",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "ca5d742844a46cff"
            ]
        ]
    },
    {
        "id": "ca5d742844a46cff",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 420,
        "wires": [
            [
                "48fd1c5bece7a78c",
                "83f0dc30033ef6f8"
            ]
        ]
    },
    {
        "id": "48fd1c5bece7a78c",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "58ecbc5478dc34f0"
            ]
        ]
    },
    {
        "id": "58ecbc5478dc34f0",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 780,
        "y": 460,
        "wires": [
            [
                "0cad90d8f7c50503"
            ]
        ]
    },
    {
        "id": "0cad90d8f7c50503",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst conectionType = msg.payload;\nconst newLineInLog = conectionType + ' | ' + humanTimestamp + ` | IP - ` + socketip + ` | socket - ` + socketid;\nconst authSettings = global.get('authSettings')||{};\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n\n\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n//muiLog = global.get('muiLog');\n//msg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 460,
        "wires": [
            [
                "aa9efcce2a2b2749"
            ]
        ]
    },
    {
        "id": "aa9efcce2a2b2749",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 460,
        "wires": []
    },
    {
        "id": "290acac040a26422",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 540,
        "wires": [
            [
                "2e76aef6f90b29fa"
            ]
        ]
    },
    {
        "id": "2e76aef6f90b29fa",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 780,
        "y": 540,
        "wires": [
            [
                "66d26836989c03d6"
            ]
        ]
    },
    {
        "id": "66d26836989c03d6",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "MUI LOG [lost]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst conectionType = msg.payload;\nconst newLineInLog = conectionType + ' | ' + humanTimestamp + ` | IP - ` + socketip + ` | socket - ` + socketid;\nconst authSettings = global.get('authSettings')||{};\n\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n//muiLog = global.get('muiLog');\n//msg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 540,
        "wires": [
            [
                "6a521a0e27ad649c"
            ]
        ]
    },
    {
        "id": "6a521a0e27ad649c",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 540,
        "wires": []
    },
    {
        "id": "4c50afc94b8b43a5",
        "type": "ui_ui_control",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "events": "change",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "3fbcf2c7ad9cda7b"
            ]
        ]
    },
    {
        "id": "bb4097761e757ed6",
        "type": "ui_ui_control",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "events": "all",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "209fc8d432b02b6f",
                "76602fa7ee1b67bb"
            ]
        ]
    },
    {
        "id": "cb4dad6e5d98ac2e",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 580,
        "wires": []
    },
    {
        "id": "78a57622081d8542",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "add userName and userPassword to AuthLoginCredentials",
        "func": "const socketid = msg.socketid;\nconst userName = msg.payload.Username;\nconst userPassword = msg.payload.Password;\nvar error = false;\nvar errorMsg;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n\n\n\n//add userName and userPassword to AuthLoginCredentials.socketid\nif (AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid]['userName'] = userName;\n    AuthLoginCredentials[socketid]['userPassword'] = userPassword;\n}\nelse\n{\n    error = true;\n    errorMsg = 'socketid:' + socketid + ' not found in AuthLoginCredentials, User sat idle too long or too many users are trying to login.'\n}\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n\n//msg.AuthLoginCredentials = AuthLoginCredentials;\nmsg.error = error;\nmsg.errorMsg = errorMsg;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "cb4dad6e5d98ac2e",
                "a6f65e1e1721558f"
            ]
        ]
    },
    {
        "id": "d6acea491b49d1a8",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Is AuthLoginCredentials user in authUsers Object",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst authUsers = global.get('authUsers');\nconst userName = AuthLoginCredentials[socketid].userName;\nvar userNameCheck = false;\n\n\n//check that userName is in authUsers\nif (authUsers.hasOwnProperty(userName) ) {\nuserNameCheck = true;\n}\n\nmsg.userName = userName;\nmsg.userNameCheck = userNameCheck;\n\n\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "c9fc0f842a6d41b3"
            ]
        ]
    },
    {
        "id": "a6f65e1e1721558f",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 620,
        "wires": [
            [
                "4986ea0f8d3443cc"
            ]
        ]
    },
    {
        "id": "beacedf613f5f44f",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "userPassword and authUsers Hash",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst authUsers = global.get('authUsers');\n\nmsg.authUsersPasswordHash = authUsers[AuthLoginCredentials[socketid].userName].password;\nmsg.AuthLoginCredentialsPassword = AuthLoginCredentials[socketid].userPassword;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 740,
        "wires": [
            [
                "4870e32402220f6b"
            ]
        ]
    },
    {
        "id": "c9fc0f842a6d41b3",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "userNameCheck false/true",
        "property": "userNameCheck",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 700,
        "wires": [
            [
                "0325a4b64f023a65"
            ],
            [
                "beacedf613f5f44f"
            ]
        ]
    },
    {
        "id": "4870e32402220f6b",
        "type": "twin-bcrypt",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "action": "verify",
        "field": "AuthLoginCredentialsPassword",
        "hash": "authUsersPasswordHash",
        "rounds": "4",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "5dc858f8ea837d74"
            ]
        ]
    },
    {
        "id": "5dc858f8ea837d74",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "userPasswordCheck false/true",
        "property": "match",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 820,
        "wires": [
            [
                "0325a4b64f023a65"
            ],
            [
                "7866e6af042b1d77"
            ]
        ]
    },
    {
        "id": "0325a4b64f023a65",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Failed Login counter & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst socketip = AuthLoginCredentials[socketid]['ip'];\nconst userName = msg.userName;\nconst userNameCheck = msg.userNameCheck;\nconst userPasswordCheck = msg.match;\nconst humanTimestamp = msg.humanTimestamp;\n\n//Get MUIlOG else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//Get failedLoginTimmer else create it\nvar failedLoginTimmer = global.get('failedLoginTimmer')||{};\n\n\n//Check if userName exzists and is found\nif (userNameCheck === false)\n{\n    var newLineInLog = 'Relative URL: /ui/#!/1 | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + `Login FAIL - Incorrect Name: ` + userName + ` | socket - ` + socketid;\n    //add new log item to the top of the array\n    muiLog.unshift(newLineInLog);\n    \n    if (!failedLoginTimmer[socketip])\n    {\n        failedLoginTimmer[socketip] = {};\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['failedattempts'] = 1;\n        \n    }\n    else\n    {\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['failedattempts'] = failedLoginTimmer[socketip]['failedattempts'] + 1;\n    }\n}\nelse if (userPasswordCheck === false)\n{\n    newLineInLog = 'Relative URL: /ui/#!/1 | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + `Login FAIL - Incorrect Password | socket - ` + socketid;\n    //add new log item to the top of the array\n    muiLog.unshift(newLineInLog);\n    \n    if (!failedLoginTimmer[socketip])\n    {\n        failedLoginTimmer[socketip] = {};\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['userPasswordCheck'] = userPasswordCheck;\n        failedLoginTimmer[socketip]['failedattempts'] = 1;\n        \n    }\n    else\n    {\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['userPasswordCheck'] = userPasswordCheck;\n        failedLoginTimmer[socketip]['failedattempts'] = failedLoginTimmer[socketip]['failedattempts'] + 1;\n    }\n}\n\n\n\nglobal.set('muiLog', muiLog);\n\n//muiLog = global.get('muiLog');\n//msg.muiLog = muiLog;\n\nglobal.set('failedLoginTimmer', failedLoginTimmer);\n\nfailedLoginTimmer = global.get('failedLoginTimmer');\nvar failedattempts = failedLoginTimmer[socketip]['failedattempts'];\n\nmsg.failedLoginTimmer = failedLoginTimmer;\nmsg.failedattempts = failedattempts\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 700,
        "wires": [
            [
                "bb292d942af2420d"
            ]
        ]
    },
    {
        "id": "4986ea0f8d3443cc",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 360,
        "y": 620,
        "wires": [
            [
                "669f8ff4d0e2aeeb"
            ]
        ]
    },
    {
        "id": "669f8ff4d0e2aeeb",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Failed Login Delay",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst socketip = AuthLoginCredentials[socketid]['ip']||'0.0.0.0';\n\n//Get failedLoginTimmer else create it\nvar failedLoginTimmer = global.get('failedLoginTimmer')||{};\n\n\n//clean up failedLoginTimmer so it does not overflow.\n//rather how many ip's to store at any given time\nvar failedLoginTimmerMaxLength = 31557600;\n//get keys failedLoginTimmer object \nvar failedLoginTimmerKeys = Object.keys(failedLoginTimmer);\n//get length of failedLoginTimmer object \nvar failedLoginTimmerLength = failedLoginTimmerKeys.length;\n//remove 2 items from failedLoginTimmer if > failedLoginTimmerMaxLength\nif (failedLoginTimmerLength > failedLoginTimmerMaxLength)\n{   \n    delete failedLoginTimmer[failedLoginTimmerKeys[0]];\n    delete failedLoginTimmer[failedLoginTimmerKeys[1]];\n}\n\n//check if ip has been added to timmer\nif (!failedLoginTimmer[socketip])\n{\n    msg.delay = 1000;\n    //msg.rate = 1000;\n    msg.failedattempts = 1;\n    return msg;\n}\nelse\n{\n    msg.delay = failedLoginTimmer[socketip]['failedattempts'] * 1000;\n    //msg.rate = failedLoginTimmer[socketip]['failedattempts'] * 1000;\n    msg.failedattempts = failedLoginTimmer[socketip]['failedattempts'];\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 620,
        "wires": [
            [
                "0c3977fbcdb4257e",
                "07c30b7ec8d19009"
            ]
        ]
    },
    {
        "id": "0c3977fbcdb4257e",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 660,
        "wires": [
            [
                "e7d1848f601dba35"
            ]
        ]
    },
    {
        "id": "5b46ac5e6e426938",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "LOGIN FAILURE warning",
        "func": "\nmsg.topic = `LOGIN FAILURE`;\nmsg.payload = `Username or Password Incorrect`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 740,
        "wires": [
            [
                "5c3ad057718af50a"
            ]
        ]
    },
    {
        "id": "bb292d942af2420d",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "failedattempts < 5, else",
        "property": "failedattempts",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 740,
        "wires": [
            [
                "5b46ac5e6e426938"
            ],
            [
                "4996ad2ab7df7464"
            ]
        ]
    },
    {
        "id": "4996ad2ab7df7464",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "LOGIN FAILURE warning",
        "func": "\nmsg.topic = `LOGIN FAILURE`;\nmsg.payload = `Username or Password Incorrect`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 780,
        "wires": [
            [
                "ea13c9fdf17bca7a"
            ]
        ]
    },
    {
        "id": "7866e6af042b1d77",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Login Success: MUI LOG",
        "func": "const socketid = msg.socketid;\nvar AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst socketip = AuthLoginCredentials[socketid]['ip'];\nconst userName = msg.userName;\nconst humanTimestamp = msg.humanTimestamp;\nconst authUsers = global.get('authUsers');\nconst authSettings = global.get('authSettings');\n\n//Get MUIlOG else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//Get failedLoginTimmer else create it\nvar failedLoginTimmer = global.get('failedLoginTimmer')||{};\n\n//check that userName is in authUsers\nif (failedLoginTimmer.hasOwnProperty(socketip) ) {\n    delete failedLoginTimmer[socketip];\n    //failedLoginTimmer[socketip]['failedattempts'] = 1;\n}\nglobal.set('failedLoginTimmer', failedLoginTimmer);\n\nvar newLineInLog = 'Relative URL: /ui/#!/1 | ' + humanTimestamp + ` | IP - ` + socketip + ` | User: ` + userName + ` Loged-In | socket - ` + socketid;\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\nglobal.set('muiLog', muiLog);\n\n\nvar email = authUsers[userName].email;\nvar role = authUsers[userName].role;\nvar firstname = authUsers[userName].firstname;\nvar lastname = authUsers[userName].lastname;\nvar info = authUsers[userName].info;\n\n\n//add user as loggedin to AuthLoginCredentials\nAuthLoginCredentials[socketid]['email'] = email;\nAuthLoginCredentials[socketid]['role'] = role;\nAuthLoginCredentials[socketid]['firstname'] = firstname;\nAuthLoginCredentials[socketid]['lastname'] = lastname;\nAuthLoginCredentials[socketid]['info'] = info;\nAuthLoginCredentials[socketid]['loggedin'] = true;\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\n//get ourl (original url before being sent to login page)\n//msg.ourl = AuthLoginCredentials[socketid].ourl\nreturn msg;\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 820,
        "wires": [
            [
                "d1b3e7fe677fa287"
            ]
        ]
    },
    {
        "id": "e7d1848f601dba35",
        "type": "trigger",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 280,
        "y": 660,
        "wires": [
            [
                "d6acea491b49d1a8"
            ]
        ]
    },
    {
        "id": "87f633a770c22943",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "I forgot my Username or Password",
        "group": "f5f7cada415a15e8",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "<font size=\"-6\">I forgot my Username or Password</font>",
        "tooltip": "",
        "color": "#0094CE",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 900,
        "wires": [
            [
                "5fb366f23a1bda5e"
            ]
        ]
    },
    {
        "id": "0ac54449ae16940d",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Create a new account",
        "group": "f5f7cada415a15e8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"-6\">Create a new account</font>",
        "tooltip": "",
        "color": "#0094CE",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 860,
        "wires": [
            [
                "cc114125f68f77f3"
            ]
        ]
    },
    {
        "id": "5c3ad057718af50a",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "20d3ad533f609f73",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Send User to AccountRecovery",
        "func": "msg.timeout = 2;\nmsg.topic = ``;\nmsg.url = '/ui/#!/3?socketid='+msg.socketid;\nmsg.payload = '<!DOCTYPE html><html><head><title>AccountRecovery</title></head><body>AccountRecovery<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 780,
        "wires": [
            [
                "e99a8e31b9bb4926"
            ]
        ]
    },
    {
        "id": "5cf3a44df0489cc3",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "Unless replaceing Home Tab @ numeric index 0. Place all new Tabs below Account Tab with a numeric index of 6 or greater",
        "info": "",
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "f16b5872a53fd27e",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Login Tab 1",
        "info": "",
        "x": 110,
        "y": 340,
        "wires": []
    },
    {
        "id": "ea13c9fdf17bca7a",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 830,
        "y": 780,
        "wires": [
            [
                "20d3ad533f609f73"
            ]
        ]
    },
    {
        "id": "e99a8e31b9bb4926",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 780,
        "wires": []
    },
    {
        "id": "c4e386b49d869f71",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 620,
        "wires": []
    },
    {
        "id": "07c30b7ec8d19009",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Login msg & set timeout ",
        "func": "msg.timeout = msg.failedattempts;\nmsg.topic = '';\nmsg.payload = 'Logging In';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "c4e386b49d869f71"
            ]
        ]
    },
    {
        "id": "d1b3e7fe677fa287",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nvar destURL = '/ui/#!/0?socketid='+socketid;\n\n//Get AuthLoginCredentials\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\n//check that fromURL is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('fromURL')) {\n    //destURL = fromURL+'?socketid='+socketid;\n    destURL = AuthLoginCredentials[socketid].fromURL + '?socketid='+socketid;\n    }\n}\n\nmsg.timeout = 2;\nmsg.topic = ``;\n\nmsg.url = destURL;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 820,
        "wires": [
            [
                "ef51b1fe73c78d66"
            ]
        ]
    },
    {
        "id": "ef51b1fe73c78d66",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 820,
        "wires": []
    },
    {
        "id": "cc114125f68f77f3",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to Create new account page\nmsg.url = '/ui/#!/2?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>New Account</title></head><body>New Account<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 860,
        "wires": [
            [
                "424b94baf58e485d"
            ]
        ]
    },
    {
        "id": "424b94baf58e485d",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 860,
        "wires": []
    },
    {
        "id": "5fb366f23a1bda5e",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to Account Recovery page\nmsg.url = '/ui/#!/3?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Account Recovery</title></head><body>Account Recovery<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 900,
        "wires": [
            [
                "8b05b7ee2d56b4cd"
            ]
        ]
    },
    {
        "id": "8b05b7ee2d56b4cd",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 900,
        "wires": []
    },
    {
        "id": "e36c85ad5fa2da1f",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "New Account Tab 2",
        "info": "",
        "x": 130,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a9e9c57981695b32",
        "type": "ui_form",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "New Account",
        "label": "",
        "group": "62b44eba9c39b679",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "userName",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "userPassword",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Confirm Password",
                "value": "confirmPassword",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "email",
                "value": "userEmail",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "First Name",
                "value": "firstName",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Last Name",
                "value": "lastName",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Department, Job role or Title",
                "value": "info",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "userName": "",
            "userPassword": "",
            "confirmPassword": "",
            "userEmail": "",
            "firstName": "",
            "lastName": "",
            "info": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "3b4dd55b17e5144c"
            ]
        ]
    },
    {
        "id": "3b4dd55b17e5144c",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "Submition Checks",
        "func": "const userSubmition = msg.payload;\nconst socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userName = msg.payload.userName;\nconst userPassword = msg.payload.userPassword;\nconst confirmPassword = msg.payload.confirmPassword;\nconst userEmail = msg.payload.userEmail;\nconst firstName = msg.payload.firstName;\nconst lastName = msg.payload.lastName;\nconst info = msg.payload.info;\nconst authSettings = global.get('authSettings');\n\n// Password Regex pattern checker\nconst containsNchar = new RegExp('(?=.{'+authSettings.passReq.mustContainMinCharOf+',})');\nconst containsOneUppercase = new RegExp('(?=.*[A-Z])');\nconst containsOneLowercase = new RegExp('(?=.*[a-z])');\nconst containsOneNumber = new RegExp('(?=.*[0-9])');\nconst containsOneSpecialChar = new RegExp('(?=.*[@$!%*?&])');\n\nvar authUsersEmailsArray = [];\n\n\n//creat an arry of allready used emails\n//get all keys(usernames) from the authUsers object first\nconst authUsersKeys = Object.keys(authUsers);\nauthUsersKeys.forEach(function(eachUserName) {\n    let eachEmail = authUsers[eachUserName].email;\n    authUsersEmailsArray.push(eachEmail);\n});\n\n\n//check that userName is not allready taken by another user in authUsers\nif (authUsers.hasOwnProperty(userName) ) {\n    msg.error = true;\n    msg.topic = 'Username already in use';\n    msg.payload = 'Please Choose another Username';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (userPassword !== confirmPassword) {\n    msg.error = true;\n    msg.topic = 'Passwords do not match';\n    msg.payload = 'Please enter matching Passwords';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (!containsNchar.test(userPassword)) {\n    msg.error = true;\n    msg.topic = 'Password too short';\n    msg.payload = 'Must be longer than '+ authSettings.passReq.mustContainMinCharOf.toString() +' characters';\n    return msg;\n}\nif (authSettings.passReq.mustContainMinOneUppercase) {\n    if (!containsOneUppercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks uppercase character';\n        msg.payload = 'Must contain at least one upper uppercase character. Like ABCDEFG';\n        return msg;\n    }\n    \n}\nif (authSettings.passReq.mustContainMinOneLowercase) {\n    if (!containsOneLowercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks lowercase character';\n        msg.payload = 'Must contain at least one lowercase character. Like abcdefg';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneNumber) {\n    if (!containsOneNumber.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a number';\n        msg.payload = 'Must contain at least one number. Like 1234567';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneSpecialChar) {\n    if (!containsOneSpecialChar.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a special character';\n        msg.payload = 'Must contain at least one of these special characters. @$!%*?&';\n        return msg;\n    }\n}\nif (authUsersEmailsArray.includes(userEmail)) {\n    msg.error = true;\n    msg.topic = 'Email already in use';\n    msg.payload = 'Please recover account';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (true) {\n    msg.timeout = 3;\n    msg.error = false;\n    msg.topic = 'New Account Request';\n    msg.payload = 'Submitted';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "59f0f10230ea8f86"
            ]
        ]
    },
    {
        "id": "59f0f10230ea8f86",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1040,
        "wires": [
            [
                "b7bbbe75cf064b7a"
            ],
            [
                "18625af9615e73d1"
            ]
        ]
    },
    {
        "id": "b7bbbe75cf064b7a",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 650,
        "y": 1040,
        "wires": [
            [
                "46590fd607fbf6bb"
            ]
        ]
    },
    {
        "id": "46590fd607fbf6bb",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Email",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 1040,
        "wires": [
            [
                "5b803fa961075717"
            ]
        ]
    },
    {
        "id": "1e6ef5e1ec656162",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1040,
        "wires": []
    },
    {
        "id": "5b803fa961075717",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to Account Recovery page\nmsg.url = '/ui/#!/3?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Account Recovery</title></head><body>Account Recovery<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1040,
        "wires": [
            [
                "1e6ef5e1ec656162"
            ]
        ]
    },
    {
        "id": "98b6c607bf54ac9b",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "newUesrRequests & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userSubmition = msg.userSubmition;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n    \n        //Get newUesrRequests else create it\n        var newUesrRequests = global.get('newUesrRequests')||{};\n        \n        //clean up newUesrRequests so it does not overflow.\n        //Set max length of newUesrRequests object, \n        var newUesrRequestsMaxLength = authSettings.newUesrs.newUesrRequestsMaxPending;\n        //get keys newUesrRequests object \n        var newUesrRequestsKeys = Object.keys(newUesrRequests);\n        //get length of newUesrRequests object \n        var newUesrRequestsLength = newUesrRequestsKeys.length;\n        //remove 2 items from newUesrRequests if > newUesrRequestsMaxLength\n        if (newUesrRequestsLength > newUesrRequestsMaxLength)\n        {   \n            delete newUesrRequests[newUesrRequestsKeys[0]];\n            delete newUesrRequests[newUesrRequestsKeys[1]];\n        }\n        \n        //set newUesrRequests to values submitted in form\n        if (!newUesrRequests[userSubmition.userName])\n        {\n            newUesrRequests[userSubmition.userName] = {};\n            newUesrRequests[userSubmition.userName]['userPassword'] = userSubmition.userPassword;\n            newUesrRequests[userSubmition.userName]['userEmail'] = userSubmition.userEmail;\n            newUesrRequests[userSubmition.userName]['userRole'] = 'user';\n            newUesrRequests[userSubmition.userName]['firstName'] = userSubmition.firstName;\n            newUesrRequests[userSubmition.userName]['lastName'] = userSubmition.lastName;\n            newUesrRequests[userSubmition.userName]['info'] = userSubmition.info;\n            newUesrRequests[userSubmition.userName]['ip'] = socketip;\n        }\n        else\n        {\n            newUesrRequests[userSubmition.userName]['userPassword'] = userSubmition.userPassword;\n            newUesrRequests[userSubmition.userName]['userEmail'] = userSubmition.userEmail.toLowerCase();\n            newUesrRequests[userSubmition.userName]['userRole'] = 'user';\n            newUesrRequests[userSubmition.userName]['firstName'] = userSubmition.firstName;\n            newUesrRequests[userSubmition.userName]['lastName'] = userSubmition.lastName;\n            newUesrRequests[userSubmition.userName]['info'] = userSubmition.info;\n            newUesrRequests[userSubmition.userName]['ip'] = socketip;\n        }\n        global.set('newUesrRequests', newUesrRequests);\n        newLineInLog = 'Relative URL: /ui/#!/2 | '+ humanTimestamp + ` | IP - ` + socketip + ` | ` + `Newuser Request Submitted | socket - ` + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        msg.topic = 'Request';\n        msg.payload = 'Submitted';\n        msg.userSubmition = userSubmition;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.topic = '';\n        msg.payload = 'Login';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    msg.topic = '';\n    msg.payload = 'Login';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "de7d61fe54078f54"
            ]
        ]
    },
    {
        "id": "d4e71802ca6f9b9e",
        "type": "twin-bcrypt",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "",
        "action": "encrypt",
        "field": "userSubmition.userPassword",
        "hash": "",
        "rounds": "4",
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "98b6c607bf54ac9b"
            ]
        ]
    },
    {
        "id": "18625af9615e73d1",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "0ced750abad2e475"
            ]
        ]
    },
    {
        "id": "0ced750abad2e475",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "d4e71802ca6f9b9e"
            ]
        ]
    },
    {
        "id": "de7d61fe54078f54",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 1100,
        "wires": [
            [
                "2722df8764f86cdc"
            ],
            [
                "68f7acbefe6ee986"
            ]
        ]
    },
    {
        "id": "2722df8764f86cdc",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1080,
        "wires": [
            [
                "a65151249ef573ae"
            ]
        ]
    },
    {
        "id": "a65151249ef573ae",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1080,
        "wires": []
    },
    {
        "id": "68f7acbefe6ee986",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage\nmsg.url = '/ui/#!/0?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Request Submitted</title></head><body>Request Submitted<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1120,
        "wires": [
            [
                "7ba798a4793b928e"
            ]
        ]
    },
    {
        "id": "7ba798a4793b928e",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "ca7e48983955817c",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8752f4c3921ebeaf",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "Things todo when node-red starts",
        "info": "",
        "x": 170,
        "y": 3600,
        "wires": []
    },
    {
        "id": "a9f4a28b31572f7f",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "import auth file to flow.auth if it exzists, if not then create a new one.",
        "info": "",
        "x": 320,
        "y": 3640,
        "wires": []
    },
    {
        "id": "3354d566b3da04ad",
        "type": "file in",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "filename": "./data/auth/authUsers.dat",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 3680,
        "wires": [
            [
                "2e9cc36906198122"
            ]
        ]
    },
    {
        "id": "1f2d6d5acf7b4edc",
        "type": "inject",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 3680,
        "wires": [
            [
                "3354d566b3da04ad"
            ]
        ]
    },
    {
        "id": "a807e430a329ee15",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3680,
        "wires": []
    },
    {
        "id": "2e9cc36906198122",
        "type": "json",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 3680,
        "wires": [
            [
                "6ad13d8ae48010ec"
            ]
        ]
    },
    {
        "id": "a606a6b474386326",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "authUsers",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 3680,
        "wires": [
            [
                "a807e430a329ee15"
            ]
        ]
    },
    {
        "id": "607133395ea78f4c",
        "type": "catch",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "scope": [
            "3354d566b3da04ad"
        ],
        "uncaught": false,
        "x": 290,
        "y": 3720,
        "wires": [
            [
                "d5af879def4fafbf"
            ]
        ]
    },
    {
        "id": "6ad13d8ae48010ec",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "msg.payload.admin has key password",
        "property": "payload.admin",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "password",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 3680,
        "wires": [
            [
                "a606a6b474386326"
            ],
            [
                "d5af879def4fafbf"
            ]
        ]
    },
    {
        "id": "c6b2a63f9aa1e0a8",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "import authsettings file to flow.authsettings if it exzists, if not then create a new one.",
        "info": "",
        "x": 370,
        "y": 3760,
        "wires": []
    },
    {
        "id": "7137b2bc13f14804",
        "type": "file in",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "filename": "./data/auth/authSettings.dat",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 3800,
        "wires": [
            [
                "0d1bd37488ea0ba8"
            ]
        ]
    },
    {
        "id": "f40be573b0da39df",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3800,
        "wires": []
    },
    {
        "id": "0d1bd37488ea0ba8",
        "type": "json",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 3800,
        "wires": [
            [
                "72a230e3f11abf0b"
            ]
        ]
    },
    {
        "id": "41a647f295cc807c",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "authSettings",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 3800,
        "wires": [
            [
                "f40be573b0da39df"
            ]
        ]
    },
    {
        "id": "87c0e22176ae266d",
        "type": "catch",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "scope": [
            "7137b2bc13f14804"
        ],
        "uncaught": false,
        "x": 290,
        "y": 3840,
        "wires": [
            [
                "f521241b88a78e18"
            ]
        ]
    },
    {
        "id": "72a230e3f11abf0b",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "msg.payload.muiLogin has key maxSocketips",
        "property": "payload.muiLogin",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "maxSocketips",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 3800,
        "wires": [
            [
                "41a647f295cc807c"
            ],
            [
                "f521241b88a78e18"
            ]
        ]
    },
    {
        "id": "04919a3b8f503a9a",
        "type": "inject",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 3800,
        "wires": [
            [
                "7137b2bc13f14804"
            ]
        ]
    },
    {
        "id": "d5af879def4fafbf",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "password",
                "pt": "msg",
                "to": "password",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 3720,
        "wires": [
            [
                "507cdd6675871d76"
            ]
        ]
    },
    {
        "id": "507cdd6675871d76",
        "type": "twin-bcrypt",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "action": "encrypt",
        "field": "password",
        "hash": "",
        "rounds": "4",
        "x": 630,
        "y": 3720,
        "wires": [
            [
                "f59eb7290e4d7764"
            ]
        ]
    },
    {
        "id": "30d77718e4d2ef83",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3840,
        "wires": []
    },
    {
        "id": "cfa2c8afefa74c64",
        "type": "file",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "filename": "./data/auth/authSettings.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 3840,
        "wires": [
            [
                "30d77718e4d2ef83"
            ]
        ]
    },
    {
        "id": "f521241b88a78e18",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "settings object",
        "func": "//function randomString(length, chars) {\n//    var result = '';\n//   for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n//    return result;\n//}\n//create a random 32 char string for encrypt/decrypt of user passwords\n//var rString = randomString(32, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n\n\nmsg.payload = {\n    muiLogin : {\n        maxSocketips : 1000\n    },\n    muiLog : {\n        maxmuiLogLength : 250\n    },\n    newUesrs : {\n        newUesrRequestsMaxPending : 1000\n    },\n    passReq : {\n        mustContainMinCharOf : 8,\n        mustContainMinOneUppercase : true,\n        mustContainMinOneLowercase : true,\n        mustContainMinOneNumber : true,\n        mustContainMinOneSpecialChar : false\n    },\n    emailSupportEnabled : false\n    \n    //ranString : rString\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 3840,
        "wires": [
            [
                "8e4e78fe052f805b",
                "72a230e3f11abf0b"
            ]
        ]
    },
    {
        "id": "8e4e78fe052f805b",
        "type": "json",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 610,
        "y": 3840,
        "wires": [
            [
                "cfa2c8afefa74c64"
            ]
        ]
    },
    {
        "id": "b59f0dbf9b4662ef",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3720,
        "wires": []
    },
    {
        "id": "c31ccb3432429d3c",
        "type": "file",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "filename": "./data/auth/authUsers.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1150,
        "y": 3720,
        "wires": [
            [
                "b59f0dbf9b4662ef"
            ]
        ]
    },
    {
        "id": "f59eb7290e4d7764",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "authUsers object",
        "func": "var msg_password = msg.password;\nmsg.payload = {\n    admin : {\n        password : msg_password,\n        email : 'admin@admin.com',\n        role : 'admin',\n        firstname : 'john',\n        lastname : 'doe',\n        info : 'accounting department'\n    }\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 3720,
        "wires": [
            [
                "e12b7e8c7d68d258",
                "6ad13d8ae48010ec"
            ]
        ]
    },
    {
        "id": "e12b7e8c7d68d258",
        "type": "json",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 3720,
        "wires": [
            [
                "c31ccb3432429d3c"
            ]
        ]
    },
    {
        "id": "616dd0f7ea68eef7",
        "type": "inject",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 3840,
        "wires": [
            [
                "f521241b88a78e18"
            ]
        ]
    },
    {
        "id": "8afa7bda6aa47b9f",
        "type": "inject",
        "z": "1b02f0fe7a46b56d",
        "g": "ed444964b4b424e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 3720,
        "wires": [
            [
                "d5af879def4fafbf"
            ]
        ]
    },
    {
        "id": "f121367360a20587",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "ebcd1f406c1e9e3c",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "Please setup a email node and attach it to the link in, and or replacing the debug node if you enable email support in the admin console of the dashboard page",
        "info": "",
        "x": 560,
        "y": 100,
        "wires": []
    },
    {
        "id": "877b93258fb34a07",
        "type": "link in",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "email link in",
        "links": [
            "e1ef84ae04062dd2",
            "c58a466d79445350",
            "d071990140b9c7f6"
        ],
        "x": 275,
        "y": 140,
        "wires": [
            [
                "f121367360a20587"
            ]
        ]
    },
    {
        "id": "58ab483613b22c99",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "Email Node Goes Here",
        "info": "",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "c7e7116cb32742f2",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "Email",
        "info": "",
        "x": 90,
        "y": 60,
        "wires": []
    },
    {
        "id": "eab1462b55a1b1ca",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "Leave property [To] field blank. The email address is provided by the users account!",
        "info": "",
        "x": 450,
        "y": 60,
        "wires": []
    },
    {
        "id": "555c305b917a4337",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Account Tab 4",
        "info": "",
        "x": 110,
        "y": 1480,
        "wires": []
    },
    {
        "id": "19cf7a43d27805d7",
        "type": "ui_form",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Update Password",
        "label": "Update Your Password",
        "group": "205ac72e296cb65f",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Password",
                "value": "userPassword",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Confirm Password",
                "value": "confirmPassword",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "userPassword": "",
            "confirmPassword": ""
        },
        "payload": "",
        "submit": "Update",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 190,
        "y": 1720,
        "wires": [
            [
                "b6b6f93ce1da4556"
            ]
        ]
    },
    {
        "id": "5ee64bcbbba655d7",
        "type": "ui_ui_control",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "events": "change",
        "x": 120,
        "y": 1520,
        "wires": [
            [
                "0adfab45e8bbf5e0"
            ]
        ]
    },
    {
        "id": "0adfab45e8bbf5e0",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 1520,
        "wires": [
            [
                "3ef53165947c2d33"
            ]
        ]
    },
    {
        "id": "3ef53165947c2d33",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Change tab #",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 1520,
        "wires": [
            [
                "38deed390506f8c3"
            ]
        ]
    },
    {
        "id": "34d08f9ce3070add",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "<----- Put the Page Tab number in here",
        "info": "",
        "x": 690,
        "y": 1520,
        "wires": []
    },
    {
        "id": "62e8fb24a8384fca",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst error = msg.error;\nconst tab = msg.tab.toString();\nconst newLineInLog = 'Relative URL: /ui/#!/' + tab +' | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + error + ` | socket - ` + socketid;\n\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n\n\n\n//clean up muiLog so it does not overflow.\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > 1000\nif (muiLogLength > 1000)\n{   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n\nmuiLog = global.get('muiLog');\n\nmsg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1560,
        "wires": [
            [
                "8b817cee5c5be0e5"
            ]
        ]
    },
    {
        "id": "8b817cee5c5be0e5",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nconst tab = msg.tab.toString();\nconst pageURL = '/ui/#!/' + tab;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1560,
        "wires": [
            [
                "bb64670df6f0d585"
            ]
        ]
    },
    {
        "id": "bb64670df6f0d585",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1180,
        "y": 1560,
        "wires": []
    },
    {
        "id": "38deed390506f8c3",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 1520,
        "wires": [
            [
                "f4599678c89675c6"
            ]
        ]
    },
    {
        "id": "f4599678c89675c6",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 1160,
        "y": 1520,
        "wires": [
            [
                "e8708a7f1345c858"
            ]
        ]
    },
    {
        "id": "e8708a7f1345c858",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Is user logged in?",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\n//Get AuthLoginCredentials else create it\nconst AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar isuerloggedin = false;\nvar error = 'User not logged in';\n\n\n//check that loggedin is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].loggedin === true) {\n        isuerloggedin = true;\n        //get user information from AuthLoginCredentials\n        var ip = AuthLoginCredentials[socketid].ip;\n        var userName = AuthLoginCredentials[socketid].userName;\n        var email = AuthLoginCredentials[socketid].email;\n        var role = AuthLoginCredentials[socketid].role;\n        var firstname = AuthLoginCredentials[socketid].firstname;\n        var lastname = AuthLoginCredentials[socketid].lastname;\n        var info = AuthLoginCredentials[socketid].info;\n        //if the ip that the user logged in with\n        //that is tied to the socketid of that login\n        //is diffrent then the ip used to get to this page\n        //kick the record and send user back to login page\n        if(ip !== socketip) {\n            delete AuthLoginCredentials[socketid];\n            error = 'socketip: '+socketip+' !== to Login ip: '+ip;\n            msg.error = error;\n            isuerloggedin = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n        else {\n            msg.error = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n    }\n    else {\n        msg.error = error;\n        msg.isuerloggedin = isuerloggedin;\n        return msg;\n    }\n}\nelse {\n    msg.error = error;\n    msg.isuerloggedin = isuerloggedin;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1560,
        "wires": [
            [
                "f338cf380901f28d"
            ]
        ]
    },
    {
        "id": "f338cf380901f28d",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "1[not logged in] 2[logged in]",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 1560,
        "wires": [
            [
                "62e8fb24a8384fca"
            ],
            []
        ]
    },
    {
        "id": "73d91c1153aab875",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "group": "205ac72e296cb65f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete Your Account",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 1640,
        "wires": [
            [
                "fd98cf6bc77bf4d1"
            ]
        ]
    },
    {
        "id": "50a232caa967814d",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "group": "205ac72e296cb65f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "blank",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 75,
        "y": 1720,
        "wires": [],
        "l": false
    },
    {
        "id": "fd98cf6bc77bf4d1",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Warning!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "You are about to remove all your account information and delete yourself from the system. Are you sure you want to continue?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1640,
        "wires": [
            [
                "220e877d391bfd29"
            ]
        ]
    },
    {
        "id": "220e877d391bfd29",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "CANCEL",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 1640,
        "wires": [
            [
                "e5ef009fb931a1cf"
            ]
        ]
    },
    {
        "id": "e5ef009fb931a1cf",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CANCEL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1640,
        "wires": [
            [],
            [
                "d8a489d42eda16db"
            ]
        ]
    },
    {
        "id": "21124f9be7897213",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Delete Account & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nvar authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n    \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName;\n        \n        //Delete the user from system\n        delete authUsers[userName];\n        global.set('authUsers', authUsers);\n        \n        newLineInLog = 'Relative URL: /ui/#!/4 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Deleted themselves from the system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1680,
        "wires": [
            [
                "60601908cc6a35b2"
            ]
        ]
    },
    {
        "id": "d8a489d42eda16db",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 1680,
        "wires": [
            [
                "23abfec4fcda01f7"
            ]
        ]
    },
    {
        "id": "23abfec4fcda01f7",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 360,
        "y": 1680,
        "wires": [
            [
                "21124f9be7897213"
            ]
        ]
    },
    {
        "id": "51e4b718a1610c2d",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1640,
        "wires": [
            [
                "95573606db58bd79"
            ]
        ]
    },
    {
        "id": "b5d0cc481e475dca",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage by /ui/ so they get a new socketid. this way the socketid they had tied tp AuthLoginCredentials will be deleted\nmsg.url = '/ui/';\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Account Deleted</title></head><body>Account Deleted<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1680,
        "wires": [
            [
                "090acfa9120dcef6"
            ]
        ]
    },
    {
        "id": "60601908cc6a35b2",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1660,
        "wires": [
            [
                "51e4b718a1610c2d"
            ],
            [
                "b5d0cc481e475dca"
            ]
        ]
    },
    {
        "id": "95573606db58bd79",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1640,
        "wires": []
    },
    {
        "id": "090acfa9120dcef6",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1680,
        "wires": []
    },
    {
        "id": "b6b6f93ce1da4556",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Submition Checks",
        "func": "const userSubmition = msg.payload;\nconst socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userPassword = msg.payload.userPassword;\nconst confirmPassword = msg.payload.confirmPassword;\nconst authSettings = global.get('authSettings');\n\n// Password Regex pattern checker\nconst containsNchar = new RegExp('(?=.{'+authSettings.passReq.mustContainMinCharOf+',})');\nconst containsOneUppercase = new RegExp('(?=.*[A-Z])');\nconst containsOneLowercase = new RegExp('(?=.*[a-z])');\nconst containsOneNumber = new RegExp('(?=.*[0-9])');\nconst containsOneSpecialChar = new RegExp('(?=.*[@$!%*?&])');\n\nif (userPassword !== confirmPassword) {\n    msg.error = true;\n    msg.topic = 'Passwords do not match';\n    msg.payload = 'Please enter matching Passwords';\n    return msg;\n}\nif (!containsNchar.test(userPassword)) {\n    msg.error = true;\n    msg.topic = 'Password too short';\n    msg.payload = 'Must be longer than '+ authSettings.passReq.mustContainMinCharOf.toString() +' characters';\n    return msg;\n}\nif (authSettings.passReq.mustContainMinOneUppercase) {\n    if (!containsOneUppercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks uppercase character';\n        msg.payload = 'Must contain at least one upper uppercase character. Like ABCDEFG';\n        return msg;\n    }\n    \n}\nif (authSettings.passReq.mustContainMinOneLowercase) {\n    if (!containsOneLowercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks lowercase character';\n        msg.payload = 'Must contain at least one lowercase character. Like abcdefg';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneNumber) {\n    if (!containsOneNumber.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a number';\n        msg.payload = 'Must contain at least one number. Like 1234567';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneSpecialChar) {\n    if (!containsOneSpecialChar.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a special character';\n        msg.payload = 'Must contain at least one of these special characters. @$!%*?&';\n        return msg;\n    }\n}\nif (true) {\n\n    msg.error = false;\n    msg.userSubmition = userSubmition;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1720,
        "wires": [
            [
                "c15b127c89e30c4d"
            ]
        ]
    },
    {
        "id": "dfdad9593a532925",
        "type": "ui_form",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Update Email",
        "label": "Update Your Email",
        "group": "205ac72e296cb65f",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "email",
                "value": "userEmail",
                "type": "email",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "userEmail": ""
        },
        "payload": "",
        "submit": "Update",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 140,
        "y": 1840,
        "wires": [
            [
                "fcc30cbb90cd1ad3"
            ]
        ]
    },
    {
        "id": "c15b127c89e30c4d",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 1720,
        "wires": [
            [
                "c8e90e94d0feab70"
            ],
            [
                "32968f3824dc6dd0"
            ]
        ]
    },
    {
        "id": "c8e90e94d0feab70",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 750,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "32968f3824dc6dd0",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 1760,
        "wires": [
            [
                "e7815e2edcf92344"
            ]
        ]
    },
    {
        "id": "e7815e2edcf92344",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 400,
        "y": 1760,
        "wires": [
            [
                "c7bf4de8a2d72b35"
            ]
        ]
    },
    {
        "id": "7491d5ba92388f79",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Update userPassword & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userSubmition = msg.userSubmition;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n        \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName;\n        \n        authUsers[userName].password = userSubmition.userPassword;\n        global.set('authUsers', authUsers);\n        \n        newLineInLog = 'Relative URL: /ui/#!/4 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Updated thier password | socket - ' + socketid;        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.topic = '';\n        msg.payload = 'Login';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    msg.topic = '';\n    msg.payload = 'Login';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1800,
        "wires": [
            [
                "17deb4bbfe55054c"
            ]
        ]
    },
    {
        "id": "c7bf4de8a2d72b35",
        "type": "twin-bcrypt",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "action": "encrypt",
        "field": "userSubmition.userPassword",
        "hash": "",
        "rounds": "4",
        "x": 130,
        "y": 1800,
        "wires": [
            [
                "7491d5ba92388f79"
            ]
        ]
    },
    {
        "id": "17deb4bbfe55054c",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1780,
        "wires": [
            [
                "0c32151cb7188d6b"
            ],
            [
                "3e7ffea5bac6206f"
            ]
        ]
    },
    {
        "id": "0c32151cb7188d6b",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1760,
        "wires": [
            [
                "c94a2df3c0504fa2"
            ]
        ]
    },
    {
        "id": "c94a2df3c0504fa2",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1760,
        "wires": []
    },
    {
        "id": "a46d8c45e65915e7",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1800,
        "wires": []
    },
    {
        "id": "3e7ffea5bac6206f",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Password Updated</title></head><body>Password Updated<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1800,
        "wires": [
            [
                "a46d8c45e65915e7"
            ]
        ]
    },
    {
        "id": "94d1d442a1c87344",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 1840,
        "wires": [
            [
                "cb0defecd52aa9b0"
            ],
            [
                "77990b5937c654ed"
            ]
        ]
    },
    {
        "id": "cb0defecd52aa9b0",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 750,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "fcc30cbb90cd1ad3",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Submition Checks",
        "func": "const userSubmition = msg.payload;\nconst socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userEmail = msg.payload.userEmail;\nconst authSettings = global.get('authSettings');\n\nvar authUsersEmailsArray = [];\n\n\n//creat an arry of allready used emails\n//get all keys(usernames) from the authUsers object first\nconst authUsersKeys = Object.keys(authUsers);\nauthUsersKeys.forEach(function(eachUserName) {\n    let eachEmail = authUsers[eachUserName].email;\n    authUsersEmailsArray.push(eachEmail);\n});\n\nif (authUsersEmailsArray.includes(userEmail)) {\n    msg.error = true;\n    msg.topic = 'Email already in use';\n    msg.payload = 'Please recover account';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (true) {\n\n    msg.error = false;\n    msg.userSubmition = userSubmition;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1840,
        "wires": [
            [
                "94d1d442a1c87344"
            ]
        ]
    },
    {
        "id": "77990b5937c654ed",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 1880,
        "wires": [
            [
                "c96fc492e0b05fb3"
            ]
        ]
    },
    {
        "id": "c96fc492e0b05fb3",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 400,
        "y": 1880,
        "wires": [
            [
                "5e26a5a26bc85446"
            ]
        ]
    },
    {
        "id": "5e26a5a26bc85446",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Update userPassword & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userSubmition = msg.userSubmition;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n        \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName;\n        \n        authUsers[userName].email = userSubmition.userEmail;\n        global.set('authUsers', authUsers);\n        \n        newLineInLog = 'Relative URL: /ui/#!/4 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Updated thier email | socket - ' + socketid;        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.topic = '';\n        msg.payload = 'Login';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    msg.topic = '';\n    msg.payload = 'Login';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1920,
        "wires": [
            [
                "25e76ee035baf371"
            ]
        ]
    },
    {
        "id": "25e76ee035baf371",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1920,
        "wires": [
            [
                "7e4013e59864df21"
            ],
            [
                "f74c3ea69a761a9a"
            ]
        ]
    },
    {
        "id": "7e4013e59864df21",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1900,
        "wires": [
            [
                "f3c1648329e213f6"
            ]
        ]
    },
    {
        "id": "f3c1648329e213f6",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1900,
        "wires": []
    },
    {
        "id": "ae471445d670da7e",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1940,
        "wires": []
    },
    {
        "id": "f74c3ea69a761a9a",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Format Payload for notification node",
        "func": "const email = msg.userSubmition.userEmail;\nconst socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = `Email Updated`;\n\nmsg.payload = email;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1940,
        "wires": [
            [
                "ae471445d670da7e"
            ]
        ]
    },
    {
        "id": "600cab8d95957293",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Admin Tab 5",
        "info": "",
        "x": 110,
        "y": 2080,
        "wires": []
    },
    {
        "id": "e1c5f8c1c403bbb7",
        "type": "ui_ui_control",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "events": "change",
        "x": 120,
        "y": 2120,
        "wires": [
            [
                "f460a730d4916f63"
            ]
        ]
    },
    {
        "id": "f460a730d4916f63",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 2120,
        "wires": [
            [
                "20a071bac18ef06e"
            ]
        ]
    },
    {
        "id": "20a071bac18ef06e",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Change tab #",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 2120,
        "wires": [
            [
                "a7421248134007eb"
            ]
        ]
    },
    {
        "id": "13f057cd80e9ef78",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "<----- Put the Page Tab number in here",
        "info": "",
        "x": 690,
        "y": 2120,
        "wires": []
    },
    {
        "id": "7b9ff3db8a32445f",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst error = msg.error;\nconst tab = msg.tab.toString();\nconst newLineInLog = 'Relative URL: /ui/#!/' + tab +' | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + error + ` | socket - ` + socketid;\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\nglobal.set('muiLog', muiLog);\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2160,
        "wires": [
            [
                "3f90f4ec748628b7"
            ]
        ]
    },
    {
        "id": "3f90f4ec748628b7",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nconst tab = msg.tab.toString();\nconst pageURL = '/ui/#!/' + tab;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2160,
        "wires": [
            [
                "80c14ec0f2479763"
            ]
        ]
    },
    {
        "id": "80c14ec0f2479763",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2160,
        "wires": []
    },
    {
        "id": "a7421248134007eb",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 2120,
        "wires": [
            [
                "df97ba5117bdbcfb"
            ]
        ]
    },
    {
        "id": "df97ba5117bdbcfb",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 1260,
        "y": 2120,
        "wires": [
            [
                "8f33b1031f038fc0"
            ]
        ]
    },
    {
        "id": "8f33b1031f038fc0",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Is user logged in?",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar isuerloggedin = false;\nvar error = 'User not logged in';\n\n\n//check that loggedin is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].loggedin === true) {\n        isuerloggedin = true;\n        //get user information from AuthLoginCredentials\n        const ip = AuthLoginCredentials[socketid].ip;\n        const userName = AuthLoginCredentials[socketid].userName;\n        const email = AuthLoginCredentials[socketid].email;\n        const role = AuthLoginCredentials[socketid].role;\n        const firstname = AuthLoginCredentials[socketid].firstname;\n        const lastname = AuthLoginCredentials[socketid].lastname;\n        const info = AuthLoginCredentials[socketid].info;\n        //if the ip that the user logged in with\n        //that is tied to the socketid of that login\n        //is diffrent then the ip used to get to this page\n        //kick the record and send user back to login page\n        if(ip !== socketip) {\n            delete AuthLoginCredentials[socketid];\n            error = 'User: '+userName+' socketip: '+socketip+' !== to Login ip: '+ip;\n            msg.error = error;\n            isuerloggedin = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n        if (role === 'admin') {\n        msg.error = false;\n        return msg;\n        }\n        else {\n            msg.error = 'User: '+userName+' Lacks Role';\n            msg.isuerloggedin = false;\n            return msg;\n        }\n    }\n    else {\n        msg.error = error;\n        msg.isuerloggedin = isuerloggedin;\n        return msg;\n    }\n}\nelse {\n    msg.error = error;\n    msg.isuerloggedin = isuerloggedin;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 2160,
        "wires": [
            [
                "3378546afc92fba8"
            ]
        ]
    },
    {
        "id": "3378546afc92fba8",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "1[not logged in] 2[logged in]",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 2160,
        "wires": [
            [
                "7b9ff3db8a32445f"
            ],
            [
                "ca2d22be425eeba4"
            ]
        ]
    },
    {
        "id": "56d1446bf5d51e8a",
        "type": "ui_dropdown",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Current Users",
        "label": "",
        "tooltip": "",
        "place": "Select a User",
        "group": "cc7d7ea92ffb628f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 520,
        "y": 2200,
        "wires": [
            [
                "7e212da44eaa8b71"
            ]
        ]
    },
    {
        "id": "ceef754846ef9ad8",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Current Users",
        "group": "cc7d7ea92ffb628f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Current Users</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1280,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "8c0bd244b4696997",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Delete User",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 2400,
        "wires": [
            [
                "6106117df2ccc632"
            ]
        ]
    },
    {
        "id": "2bae77fcb36496e9",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Create an arry of Current Users",
        "func": "const authUsers = global.get('authUsers')||{};\n\n//Create an arry of Current Users\nauthUsersNamesArray = Object.keys(authUsers);\n\nmsg.options = authUsersNamesArray\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2200,
        "wires": [
            [
                "56d1446bf5d51e8a"
            ]
        ]
    },
    {
        "id": "ca2d22be425eeba4",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 75,
        "y": 2200,
        "wires": [
            [
                "2bae77fcb36496e9",
                "7e73bcbd53ef66db",
                "f8f151e46ceb5b8b"
            ]
        ],
        "l": false
    },
    {
        "id": "7e212da44eaa8b71",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "admin selections",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst authUsers = global.get('authUsers')||{};\nvar currentUser = msg.payload;\n\n\n//Get admingSelections else create it\nvar admingSelections = global.get('admingSelections')||{};\n\n\n//clean up admingSelections so it does not overflow.\nvar admingSelectionsMaxLength = 1000;\n//get keys admingSelections object \nvar admingSelectionsKeys = Object.keys(admingSelections);\n//get length of admingSelections object \nvar admingSelectionsLength = admingSelectionsKeys.length;\n//remove 2 items from Credentials if > AuthLoginCredentialsMaxLength\nif (admingSelectionsLength > admingSelectionsMaxLength)\n{   \n    delete admingSelections[admingSelectionsKeys[0]];\n    delete admingSelections[admingSelectionsKeys[1]];\n}\n\n\n\n//set admingSelections to users accessing this page\nif (!admingSelections[socketid])\n{\n    admingSelections[socketid] = {};\n    admingSelections[socketid]['currentUser'] = currentUser;\n}\nelse\n{\n    admingSelections[socketid]['currentUser'] = currentUser;\n}\n\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.email = authUsers[currentUser].email;\n    msg.role = authUsers[currentUser].role;\n    msg.firstname = authUsers[currentUser].firstname;\n    msg.lastname = authUsers[currentUser].lastname;\n    msg.info = authUsers[currentUser].info;\n    \n    msg.topic = 'User: '+currentUser;\n    msg.payload = 'email: '+authUsers[currentUser].email+'<br>role: '+authUsers[currentUser].role+'<br>firstname: '+authUsers[currentUser].firstname+'<br>lastname: '+authUsers[currentUser].lastname+'<br>info: '+authUsers[currentUser].info+'<br>';\n    return msg;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2200,
        "wires": [
            [
                "33c27651d1e15310"
            ]
        ]
    },
    {
        "id": "f6bfae6cd25c1b78",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 1110,
        "y": 2480,
        "wires": []
    },
    {
        "id": "f29a2207a65a718d",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 510,
        "y": 2680,
        "wires": []
    },
    {
        "id": "18c015ba05216832",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Edit Role",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 2240,
        "wires": [
            [
                "da01a9a1225c522a"
            ]
        ]
    },
    {
        "id": "f1badb1b4536d8b0",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 10,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Delete User",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 2600,
        "wires": [
            [
                "b006c249d20d35ce"
            ]
        ]
    },
    {
        "id": "2381dfdde2c4d250",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 9,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Add User",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 2520,
        "wires": [
            [
                "86c3c18b7c1bc69a"
            ]
        ]
    },
    {
        "id": "9cd7587cbf687aa4",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Administrator",
        "group": "205ac72e296cb65f",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "<font size=\"-6\">Administrator</font>",
        "tooltip": "",
        "color": "#0094CE",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 1980,
        "wires": [
            [
                "8739e523ed27f1f5"
            ]
        ]
    },
    {
        "id": "9703c636f57f69ca",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1980,
        "wires": []
    },
    {
        "id": "f829b59a04ae7633",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "group": "205ac72e296cb65f",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 430,
        "y": 1940,
        "wires": []
    },
    {
        "id": "5c5eec17bc433818",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Password Requirements",
        "group": "cc7d7ea92ffb628f",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Password Requirements</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 270,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "aca87b04b1b3d63d",
        "type": "ui_numeric",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "label": "Minimum Length",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 13,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "4",
        "max": "32",
        "step": 1,
        "x": 380,
        "y": 2720,
        "wires": [
            [
                "628f69f69c34f79d"
            ]
        ]
    },
    {
        "id": "8d2fe966ba746dc9",
        "type": "ui_switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "label": "Require an Uppercase",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 14,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 400,
        "y": 2760,
        "wires": [
            [
                "981b7a56ac289c91"
            ]
        ]
    },
    {
        "id": "a773cf4404de8c5d",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 15,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 2800,
        "wires": []
    },
    {
        "id": "4f573273d2b56831",
        "type": "ui_switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "label": "Require an Lowercase",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 16,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 400,
        "y": 2840,
        "wires": [
            [
                "5a247894413fb589"
            ]
        ]
    },
    {
        "id": "5e1384528facbc51",
        "type": "ui_switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "label": "Require a Number",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 18,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 390,
        "y": 2920,
        "wires": [
            [
                "d773e77edd49a009"
            ]
        ]
    },
    {
        "id": "562f14056326d20b",
        "type": "ui_switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "label": "Require a SpecialChar",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 20,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 400,
        "y": 3000,
        "wires": [
            [
                "f184070ee8a0ac02"
            ]
        ]
    },
    {
        "id": "8b870f53df200d32",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 22,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 510,
        "y": 3040,
        "wires": []
    },
    {
        "id": "895122333754fb8c",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Email",
        "group": "cc7d7ea92ffb628f",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Email</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "fafccda7a16f86fe",
        "type": "ui_switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "label": "Email Support Enabled",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 24,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 400,
        "y": 3080,
        "wires": [
            [
                "1ba3ba07baeaa285"
            ]
        ]
    },
    {
        "id": "a95e8e40a862781f",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Log",
        "group": "cc7d7ea92ffb628f",
        "order": 27,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Log</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "ec6fcb0f024fac3c",
        "type": "ui_numeric",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "label": "Log Length",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 28,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "25",
        "max": "2000",
        "step": "25",
        "x": 370,
        "y": 3160,
        "wires": [
            [
                "ab9321a6d19c53d1"
            ]
        ]
    },
    {
        "id": "e68cad80cb16c2fc",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 26,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 510,
        "y": 3120,
        "wires": []
    },
    {
        "id": "a45844ff29915366",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 29,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 3200,
        "wires": [
            [
                "a44868a3b918d540"
            ]
        ]
    },
    {
        "id": "244d3739aaa00263",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 31,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 670,
        "y": 3120,
        "wires": []
    },
    {
        "id": "18f75bf0cd39e02a",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get admingSelections else create it\n        var admingSelections = global.get('admingSelections')||{};\n        //remove user submited to admingSelection by socketid\n        delete admingSelections[socketid].currentUser;\n        global.set('admingSelections', admingSelections);\n        \n        //change role\n        var authUsers = global.get('authUsers')||{};\n        if (authUsers[user].role === \"admin\") {\n            authUsers[user].role = \"user\";\n            msg.usertest = true;\n            msg.authUsers = authUsers;\n        }\n        else if (authUsers[user].role === \"user\") { \n            authUsers[user].role = \"admin\";\n            msg.usertest = false;\n            msg.authUsers = authUsers;\n        }\n        global.set('authUsers', authUsers);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' changed '+user+' role to: '+ authUsers[user].role +' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = user+' role now '+authUsers[user].role;\n        msg.authUsers = authUsers;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2260,
        "wires": [
            [
                "2bae77fcb36496e9",
                "a86bb42659a10d45",
                "4b9ad5535a3e4106"
            ]
        ]
    },
    {
        "id": "da01a9a1225c522a",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\nconst authUsers = global.get('authUsers')||{};\nvar newrole;\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('currentUser')) {\n    const currentUser = admingSelections[socketid].currentUser;\n    const userrole = authUsers[currentUser].role\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.userrole = userrole;\n    msg.topic = 'User: '+currentUser+' has a role: '+userrole;\n    if (userrole === 'user') {\n        newrole = 'admin';\n    }\n    else if (userrole === 'admin') {\n        newrole = 'user';\n    }\n    msg.payload = 'Are you sure you want to make their role: '+newrole;\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2280,
        "wires": [
            [
                "d21d998a59f46877"
            ]
        ]
    },
    {
        "id": "f47778c794ad3148",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "d21d998a59f46877",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2260,
        "wires": [
            [
                "f47778c794ad3148"
            ],
            [
                "cd18585813ef8539"
            ]
        ]
    },
    {
        "id": "cd18585813ef8539",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2280,
        "wires": [
            [
                "d08e85a47dd562a0"
            ]
        ]
    },
    {
        "id": "d08e85a47dd562a0",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2260,
        "wires": [
            [
                "2bae77fcb36496e9"
            ],
            [
                "f2e2a97a5058b270"
            ]
        ]
    },
    {
        "id": "f2e2a97a5058b270",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2280,
        "wires": [
            [
                "23716de14af550ba"
            ]
        ]
    },
    {
        "id": "23716de14af550ba",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2240,
        "wires": [
            [
                "18f75bf0cd39e02a"
            ]
        ]
    },
    {
        "id": "a86bb42659a10d45",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2260,
        "wires": []
    },
    {
        "id": "6106117df2ccc632",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('currentUser')) {\n    const currentUser = admingSelections[socketid].currentUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will Delete User: '+currentUser+' from the system';\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2440,
        "wires": [
            [
                "ba37d07258afcc96"
            ]
        ]
    },
    {
        "id": "9016786aa2ee0433",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "ba37d07258afcc96",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2420,
        "wires": [
            [
                "9016786aa2ee0433"
            ],
            [
                "102d1828fbb546b8"
            ]
        ]
    },
    {
        "id": "980bda83d39f66e8",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2440,
        "wires": [
            [
                "21ceed3f0888fba0"
            ]
        ]
    },
    {
        "id": "21ceed3f0888fba0",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2400,
        "wires": [
            [
                "f13d58a6de25ba0f"
            ]
        ]
    },
    {
        "id": "85e33e6e90930a5f",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2420,
        "wires": []
    },
    {
        "id": "f13d58a6de25ba0f",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get admingSelections else create it\n        var admingSelections = global.get('admingSelections')||{};\n        //remove user submited to admingSelection by socketid\n        delete admingSelections[socketid].currentUser;\n        global.set('admingSelections', admingSelections);\n        \n        //delete user\n        var authUsers = global.get('authUsers')||{};\n        delete authUsers[user];\n        \n        global.set('authUsers', authUsers);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' deleted user: '+user+' from the system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'User: '+user+' Deleted';\n        msg.authUsers = authUsers;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2420,
        "wires": [
            [
                "85e33e6e90930a5f",
                "2bae77fcb36496e9",
                "4b9ad5535a3e4106"
            ]
        ]
    },
    {
        "id": "75992cb64fab12d0",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2420,
        "wires": [
            [
                "8c0bd244b4696997"
            ],
            [
                "980bda83d39f66e8"
            ]
        ]
    },
    {
        "id": "102d1828fbb546b8",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2440,
        "wires": [
            [
                "75992cb64fab12d0"
            ]
        ]
    },
    {
        "id": "6786ea5377e8e8e5",
        "type": "ui_dropdown",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Pending Users",
        "label": "",
        "tooltip": "",
        "place": "Select a User",
        "group": "cc7d7ea92ffb628f",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 520,
        "y": 2480,
        "wires": [
            [
                "3124f87f4965bf03"
            ]
        ]
    },
    {
        "id": "5ba796f1a1b9dddd",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Pending Users",
        "group": "cc7d7ea92ffb628f",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Pending Users</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1280,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "7e73bcbd53ef66db",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "Create an arry of Pending Users",
        "func": "const newUesrRequests = global.get('newUesrRequests')||{};\n\n//Create an arry of Pending Users\nnewUsersNamesArray = Object.keys(newUesrRequests);\n\nmsg.options = newUsersNamesArray\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2480,
        "wires": [
            [
                "6786ea5377e8e8e5"
            ]
        ]
    },
    {
        "id": "33c27651d1e15310",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 950,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "fa01a1cb98768777",
        "type": "ui_button",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Reset Pass",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 2320,
        "wires": [
            [
                "d97c0f9a729d6ad5"
            ]
        ]
    },
    {
        "id": "1863badd1485a4ea",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "386377d666124896",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2340,
        "wires": [
            [
                "1863badd1485a4ea"
            ],
            [
                "c9441717250c0942"
            ]
        ]
    },
    {
        "id": "c9441717250c0942",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2360,
        "wires": [
            [
                "d3c9b1c6e7ab79d4"
            ]
        ]
    },
    {
        "id": "d3c9b1c6e7ab79d4",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2320,
        "wires": [
            [
                "2bae77fcb36496e9"
            ],
            [
                "6d66697209b4c50f"
            ]
        ]
    },
    {
        "id": "6d66697209b4c50f",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2360,
        "wires": [
            [
                "d8bce40dc5b648ba"
            ]
        ]
    },
    {
        "id": "d8bce40dc5b648ba",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2320,
        "wires": [
            [
                "955f785a51408b17"
            ]
        ]
    },
    {
        "id": "d97c0f9a729d6ad5",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\nconst authUsers = global.get('authUsers')||{};\nvar newrole;\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('currentUser')) {\n    const currentUser = admingSelections[socketid].currentUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will Reset User: '+currentUser+' Password';\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2360,
        "wires": [
            [
                "386377d666124896"
            ]
        ]
    },
    {
        "id": "955f785a51408b17",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "random 32char string",
        "func": "function randomString(length, chars) {\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n//create a random 32 char string\nvar rString = randomString(32, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\nmsg.rString = rString;\nmsg.rStringEncrypted = rString;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2320,
        "wires": [
            [
                "15d08b64e2fe796d"
            ]
        ]
    },
    {
        "id": "15d08b64e2fe796d",
        "type": "twin-bcrypt",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "action": "encrypt",
        "field": "rStringEncrypted",
        "hash": "",
        "rounds": "4",
        "x": 1290,
        "y": 2320,
        "wires": [
            [
                "426102e541d0a679"
            ]
        ]
    },
    {
        "id": "426102e541d0a679",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "password & MUI LOG",
        "func": "var authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\nconst humanTimestamp = msg.humanTimestamp;\nvar socketip;\nconst socketid = msg.socketid;\nconst rStringEncrypted = msg.rStringEncrypted\nconst rString = msg.rString;\nconst currentUser = msg.currentUser;\n\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        socketip = AuthLoginCredentials[socketid]['ip'];\n    }\n}\n\n//set new password for user\nauthUsers[currentUser].password = rStringEncrypted;\nglobal.set('authUsers', authUsers);\n\nvar newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+socketid+' Changed password of '+currentUser+' | socket - ' + socketid;\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\nglobal.set('muiLog', muiLog);\n\nmsg.topic = 'Password changed!';\nmsg.payload = '<b>User: '+currentUser+'<br>Password: '+rString+'</b>'+'<br><br>Copy and save the password! <br>Passwords in plain txt are not stored on the system';\nmsg.authUsers = authUsers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2360,
        "wires": [
            [
                "2f774965f185c006",
                "2bae77fcb36496e9",
                "4b9ad5535a3e4106"
            ]
        ]
    },
    {
        "id": "2f774965f185c006",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "3124f87f4965bf03",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "admin selections",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst newUesrRequests = global.get('newUesrRequests')||{};\nvar currentUser = msg.payload;\n\n\n//Get admingSelections else create it\nvar admingSelections = global.get('admingSelections')||{};\n\n\n//clean up admingSelections so it does not overflow.\nvar admingSelectionsMaxLength = 1000;\n//get keys admingSelections object \nvar admingSelectionsKeys = Object.keys(admingSelections);\n//get length of admingSelections object \nvar admingSelectionsLength = admingSelectionsKeys.length;\n//remove 2 items from Credentials if > AuthLoginCredentialsMaxLength\nif (admingSelectionsLength > admingSelectionsMaxLength)\n{   \n    delete admingSelections[admingSelectionsKeys[0]];\n    delete admingSelections[admingSelectionsKeys[1]];\n}\n\n\n\n//set admingSelections \nif (!admingSelections[socketid])\n{\n    admingSelections[socketid] = {};\n    admingSelections[socketid]['newUesrRequestsUser'] = currentUser;\n}\nelse\n{\n    admingSelections[socketid]['newUesrRequestsUser'] = currentUser;\n}\n\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.email = newUesrRequests[currentUser].userEmail;\n    msg.role = 'user';\n    msg.firstname = newUesrRequests[currentUser].firstName;\n    msg.lastname = newUesrRequests[currentUser].lastName;\n    msg.info = newUesrRequests[currentUser].info;\n    \n    msg.topic = 'User: '+currentUser;\n    msg.payload = 'email: '+newUesrRequests[currentUser].userEmail+'<br>role: user<br>firstname: '+newUesrRequests[currentUser].firstName+'<br>lastname: '+newUesrRequests[currentUser].lastName+'<br>info: '+newUesrRequests[currentUser].info+'<br>'+'<br>IP address of user who created this account<br> '+newUesrRequests[currentUser].ip+'<br>';\n    return msg;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2480,
        "wires": [
            [
                "b087b61086f7d7cd"
            ]
        ]
    },
    {
        "id": "b087b61086f7d7cd",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 950,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "83f0dc30033ef6f8",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "Remove Credentials",
        "func": "const socketid = msg.socketid;\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar admingSelections = global.get('admingSelections')||{};\n//RemoveAuthLoginCredentials when user connects to stop hijacking attempt of socketid\ndelete AuthLoginCredentials[socketid];\ndelete admingSelections[socketid];\n\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nglobal.set('admingSelections', admingSelections);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n//msg.AuthLoginCredentials = AuthLoginCredentials;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "89f051a2afd5953a"
            ]
        ]
    },
    {
        "id": "89f051a2afd5953a",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "1bde416b48c60f5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 420,
        "wires": []
    },
    {
        "id": "f02bc44dd3aa1ff7",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get newUesrRequests else create it\n        var newUesrRequests = global.get('newUesrRequests')||{};\n        //add user submited to admingSelections by socketid to authUsers Object\n        var authUsers = global.get('authUsers')||{};\n        \n        authUsers[user] = {};\n        authUsers[user]['password'] = newUesrRequests[user].userPassword;\n        authUsers[user]['email'] = newUesrRequests[user].userEmail;\n        authUsers[user]['role'] = newUesrRequests[user].userRole;\n        authUsers[user]['firstname'] = newUesrRequests[user].firstName;\n        authUsers[user]['lastname'] = newUesrRequests[user].lastName;\n        authUsers[user]['info'] = newUesrRequests[user].info;\n        \n        global.set('authUsers', authUsers);\n        \n        //now that user is added ... remove from newUesrRequests object\n        delete newUesrRequests[user];\n        global.set('newUesrRequests', newUesrRequests);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' added '+user+' to system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = ' added User: '+user+' to system'\n        msg.authUsers = authUsers;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2540,
        "wires": [
            [
                "ca4ee0d3b308ab28",
                "4b9ad5535a3e4106",
                "7e73bcbd53ef66db"
            ]
        ]
    },
    {
        "id": "1fb7cfd6c52589d3",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "297901a6171c7f6e",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2540,
        "wires": [
            [
                "1fb7cfd6c52589d3"
            ],
            [
                "0be796f6cacfaa53"
            ]
        ]
    },
    {
        "id": "0be796f6cacfaa53",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2560,
        "wires": [
            [
                "896c3130ceab8c04"
            ]
        ]
    },
    {
        "id": "896c3130ceab8c04",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2540,
        "wires": [
            [
                "7e73bcbd53ef66db"
            ],
            [
                "1a9ab1cfaf6a4a7c"
            ]
        ]
    },
    {
        "id": "1a9ab1cfaf6a4a7c",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2560,
        "wires": [
            [
                "588cad345c265809"
            ]
        ]
    },
    {
        "id": "588cad345c265809",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2520,
        "wires": [
            [
                "f02bc44dd3aa1ff7"
            ]
        ]
    },
    {
        "id": "ca4ee0d3b308ab28",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2540,
        "wires": []
    },
    {
        "id": "86c3c18b7c1bc69a",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('newUesrRequestsUser')) {\n    const currentUser = admingSelections[socketid].newUesrRequestsUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will Add User: '+currentUser+' to the system';\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2560,
        "wires": [
            [
                "297901a6171c7f6e"
            ]
        ]
    },
    {
        "id": "9286f47a87957652",
        "type": "file",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "filename": "./data/auth/authUsers.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1250,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "c5212e1b81e39d92",
        "type": "json",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1070,
        "y": 2680,
        "wires": [
            [
                "9286f47a87957652"
            ]
        ]
    },
    {
        "id": "4b9ad5535a3e4106",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "set msg.payload to msg.authUsers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "authUsers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 2640,
        "wires": [
            [
                "c5212e1b81e39d92"
            ]
        ]
    },
    {
        "id": "0c9d70cbf4009132",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get newUesrRequests else create it\n        var newUesrRequests = global.get('newUesrRequests')||{};\n        \n        //remove user from newUesrRequests object\n        delete newUesrRequests[user];\n        global.set('newUesrRequests', newUesrRequests);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Deleted '+user+' from system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = user+' role now '+authUsers[user].role;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2600,
        "wires": [
            [
                "900c96e760b84964"
            ]
        ]
    },
    {
        "id": "9d88b4fe54f7162d",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "396b8c3036909234",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2620,
        "wires": [
            [
                "9d88b4fe54f7162d"
            ],
            [
                "25b9af446bacbb34"
            ]
        ]
    },
    {
        "id": "25b9af446bacbb34",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2640,
        "wires": [
            [
                "6ecb37ef98f6ba09"
            ]
        ]
    },
    {
        "id": "6ecb37ef98f6ba09",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2620,
        "wires": [
            [],
            [
                "e0500f0e84cec724"
            ]
        ]
    },
    {
        "id": "e0500f0e84cec724",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2640,
        "wires": [
            [
                "0d86b4194219bad3"
            ]
        ]
    },
    {
        "id": "0d86b4194219bad3",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2600,
        "wires": [
            [
                "0c9d70cbf4009132"
            ]
        ]
    },
    {
        "id": "900c96e760b84964",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2600,
        "wires": []
    },
    {
        "id": "b006c249d20d35ce",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('newUesrRequestsUser')) {\n    const currentUser = admingSelections[socketid].newUesrRequestsUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will remove Pending User\\'s Account Request for user: '+currentUser;\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2640,
        "wires": [
            [
                "396b8c3036909234"
            ]
        ]
    },
    {
        "id": "346c8e3d75f48ef5",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "group": "205ac72e296cb65f",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 590,
        "y": 1940,
        "wires": []
    },
    {
        "id": "f8f151e46ceb5b8b",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "get settings",
        "func": "const authSettings = global.get('authSettings')||{};\nconst muiLog = global.get('muiLog')||{};\n\nmsg.password_mustContainMinCharOf = authSettings.passReq.mustContainMinCharOf;\nmsg.password_mustContainMinOneUppercase = authSettings.passReq.mustContainMinOneUppercase;\nmsg.password_mustContainMinOneLowercase = authSettings.passReq.mustContainMinOneLowercase;\nmsg.password_mustContainMinOneNumber = authSettings.passReq.mustContainMinOneNumber;\nmsg.password_mustContainMinOneSpecialChar = authSettings.passReq.mustContainMinOneSpecialChar;\nmsg.password_emailSupportEnabled = authSettings.emailSupportEnabled;\nmsg.password_maxmuiLogLength = authSettings.muiLog.maxmuiLogLength;\nmsg.log_maxmuiLogLength = authSettings.muiLog.maxmuiLogLength\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 2720,
        "wires": [
            [
                "315be2de79516d51",
                "b819e2cbb08679d2",
                "35204c71f459be6c",
                "3abcfc5ab82ad5c8",
                "51c353540a436ef3",
                "3896f065c034df78",
                "cfca8a83b138b713",
                "a44868a3b918d540"
            ]
        ]
    },
    {
        "id": "315be2de79516d51",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinCharOf",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 2720,
        "wires": [
            [
                "aca87b04b1b3d63d"
            ]
        ],
        "l": false
    },
    {
        "id": "b819e2cbb08679d2",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneUppercase",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 2780,
        "wires": [
            [
                "8d2fe966ba746dc9",
                "a773cf4404de8c5d"
            ]
        ],
        "l": false
    },
    {
        "id": "35204c71f459be6c",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneLowercase",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 2840,
        "wires": [
            [
                "4f573273d2b56831",
                "cfe0c164334209a7"
            ]
        ],
        "l": false
    },
    {
        "id": "3abcfc5ab82ad5c8",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneNumber",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 2940,
        "wires": [
            [
                "5e1384528facbc51",
                "c7c43557f77a453e"
            ]
        ],
        "l": false
    },
    {
        "id": "51c353540a436ef3",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneSpecialChar",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3020,
        "wires": [
            [
                "562f14056326d20b",
                "f899738da9c0041e"
            ]
        ],
        "l": false
    },
    {
        "id": "3896f065c034df78",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_emailSupportEnabled",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3100,
        "wires": [
            [
                "fafccda7a16f86fe",
                "1189a7597cd90650"
            ]
        ],
        "l": false
    },
    {
        "id": "cfca8a83b138b713",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "log_maxmuiLogLength",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3160,
        "wires": [
            [
                "ec6fcb0f024fac3c"
            ]
        ],
        "l": false
    },
    {
        "id": "507647de55a4797a",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinCharOf = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Password Minimum Length to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Password Minimum Length: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2720,
        "wires": [
            [
                "f8f151e46ceb5b8b",
                "222a1d0dbfb25799",
                "4c274864816c3737"
            ]
        ]
    },
    {
        "id": "cdec4ed8f48bb007",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneUppercase = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require an Uppercase to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require an Uppercase: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2760,
        "wires": [
            [
                "f8f151e46ceb5b8b",
                "222a1d0dbfb25799",
                "4c274864816c3737"
            ]
        ]
    },
    {
        "id": "cfe0c164334209a7",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 17,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 2880,
        "wires": []
    },
    {
        "id": "c7c43557f77a453e",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 19,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 2960,
        "wires": []
    },
    {
        "id": "f899738da9c0041e",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 21,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 3040,
        "wires": []
    },
    {
        "id": "1189a7597cd90650",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "order": 25,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 3120,
        "wires": []
    },
    {
        "id": "ac154a37ca4f1f9b",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneLowercase = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require an Lowercase to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require an Lowercase: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2840,
        "wires": [
            [
                "f8f151e46ceb5b8b",
                "222a1d0dbfb25799",
                "4c274864816c3737"
            ]
        ]
    },
    {
        "id": "80e53364790cf28c",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneNumber = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require a Number to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require a Number: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2920,
        "wires": [
            [
                "f8f151e46ceb5b8b",
                "222a1d0dbfb25799",
                "4c274864816c3737"
            ]
        ]
    },
    {
        "id": "8f8f72d64c3dbc89",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneSpecialChar = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require a SpecialChar to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require a SpecialChar: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3000,
        "wires": [
            [
                "f8f151e46ceb5b8b",
                "222a1d0dbfb25799",
                "4c274864816c3737"
            ]
        ]
    },
    {
        "id": "0ec60495c59599c0",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.emailSupportEnabled = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Email Support Enabled to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Email Support Enabled: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3080,
        "wires": [
            [
                "f8f151e46ceb5b8b",
                "222a1d0dbfb25799",
                "4c274864816c3737"
            ]
        ]
    },
    {
        "id": "f69ad9d0de74b07d",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.muiLog.maxmuiLogLength = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Log Length to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Log Length: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3160,
        "wires": [
            [
                "f8f151e46ceb5b8b",
                "222a1d0dbfb25799",
                "4c274864816c3737"
            ]
        ]
    },
    {
        "id": "222a1d0dbfb25799",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "payload to authSettings",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "authSettings",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 2760,
        "wires": [
            [
                "610fa4d7f50da562"
            ]
        ]
    },
    {
        "id": "610fa4d7f50da562",
        "type": "json",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 2800,
        "wires": [
            [
                "5deb6aedfedcfc43"
            ]
        ]
    },
    {
        "id": "5deb6aedfedcfc43",
        "type": "file",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "filename": "./data/auth/authSettings.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1320,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "4c274864816c3737",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2720,
        "wires": []
    },
    {
        "id": "a44868a3b918d540",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "muiLog",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3200,
        "wires": [
            [
                "523d9e3ef54da0a3"
            ]
        ],
        "l": false
    },
    {
        "id": "523d9e3ef54da0a3",
        "type": "split",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 3200,
        "wires": [
            [
                "e76702e631ca2887"
            ]
        ]
    },
    {
        "id": "57dcab9385da960d",
        "type": "join",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n\\r",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 3200,
        "wires": [
            [
                "5fd0cded7cac6802"
            ]
        ]
    },
    {
        "id": "e76702e631ca2887",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "func": "var payload = msg.payload;\npayload = payload+'<br><br>';\nmsg.payload = payload;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 3200,
        "wires": [
            [
                "57dcab9385da960d"
            ]
        ]
    },
    {
        "id": "6bc762980ef1693e",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 2720,
        "wires": [
            [
                "507647de55a4797a"
            ]
        ]
    },
    {
        "id": "628f69f69c34f79d",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2720,
        "wires": [
            [
                "6bc762980ef1693e"
            ]
        ]
    },
    {
        "id": "7273ddb36c13c5de",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 2760,
        "wires": [
            [
                "cdec4ed8f48bb007"
            ]
        ]
    },
    {
        "id": "981b7a56ac289c91",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2760,
        "wires": [
            [
                "7273ddb36c13c5de"
            ]
        ]
    },
    {
        "id": "940dfdc9b1f8fad3",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 2840,
        "wires": [
            [
                "ac154a37ca4f1f9b"
            ]
        ]
    },
    {
        "id": "5a247894413fb589",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2840,
        "wires": [
            [
                "940dfdc9b1f8fad3"
            ]
        ]
    },
    {
        "id": "5628cb1ed6e35a39",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 2920,
        "wires": [
            [
                "80e53364790cf28c"
            ]
        ]
    },
    {
        "id": "d773e77edd49a009",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2920,
        "wires": [
            [
                "5628cb1ed6e35a39"
            ]
        ]
    },
    {
        "id": "7d1ce19412f9a572",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 3000,
        "wires": [
            [
                "8f8f72d64c3dbc89"
            ]
        ]
    },
    {
        "id": "f184070ee8a0ac02",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 3000,
        "wires": [
            [
                "7d1ce19412f9a572"
            ]
        ]
    },
    {
        "id": "430a37d10753eb31",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 3080,
        "wires": [
            [
                "0ec60495c59599c0"
            ]
        ]
    },
    {
        "id": "1ba3ba07baeaa285",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 3080,
        "wires": [
            [
                "430a37d10753eb31"
            ]
        ]
    },
    {
        "id": "8ea74676b7c2b79e",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 3160,
        "wires": [
            [
                "f69ad9d0de74b07d"
            ]
        ]
    },
    {
        "id": "ab9321a6d19c53d1",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 3160,
        "wires": [
            [
                "8ea74676b7c2b79e"
            ]
        ]
    },
    {
        "id": "5fd0cded7cac6802",
        "type": "ui_template",
        "z": "1b02f0fe7a46b56d",
        "g": "51f60ce03cc73925",
        "group": "cc7d7ea92ffb628f",
        "name": "",
        "order": 30,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1020,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "e0f17b9b7c340479",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "Chek user for admin role & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst authSettings = global.get('authSettings')||{};\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n        \n    \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName||{};\n        const role = AuthLoginCredentials[socketid].role||{};\n        \n        \n        if (role === 'admin') {\n        msg.error = false;\n        msg.url = '/ui/#!/5?socketid='+socketid;\n        msg.topic = '';\n        msg.payload = '<!DOCTYPE html><html><head><title>Administratort</title></head><body>Administrator<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\n        return msg;\n        }\n        if (role === 'user') {\n        newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Was Declined Accessed Administrator Button | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = true;\n        msg.timeout = 2;\n        msg.topic = 'Access Denied';\n        msg.payload = 'You lack proper user role';\n        return msg;\n        }\n        \n        msg.test = 'test';\n        msg.role = role;\n        return msg;\n        \n        \n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.timeout = 2;\n        msg.url = '/ui/#!/1?socketid='+socketid;\n        msg.topic = '';\n        msg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n        msg.timeout = 2;\n        msg.url = '/ui/#!/1?socketid='+socketid;\n        msg.topic = '';\n        msg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\n        return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1980,
        "wires": [
            [
                "9703c636f57f69ca"
            ]
        ]
    },
    {
        "id": "8739e523ed27f1f5",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 1980,
        "wires": [
            [
                "1078789b2fae41fa"
            ]
        ]
    },
    {
        "id": "1078789b2fae41fa",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "c4d922530d53fcab",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 620,
        "y": 1980,
        "wires": [
            [
                "e0f17b9b7c340479"
            ]
        ]
    },
    {
        "id": "201401b3b8a2e8b1",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "3e10f12a381c462c",
        "name": "Look at Automation Tab 6 below for example of secureing your page",
        "info": "",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "7235826e9a5606ef",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "AccountRecovery Tab 3",
        "info": "",
        "x": 140,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a9819f76333696b6",
        "type": "ui_form",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "Account Recovery",
        "label": "Enter the Username or email<br>used to create your account",
        "group": "a40bb0d9c16471df",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username or email",
                "value": "userNameorEmail",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "userNameorEmail": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 150,
        "y": 1260,
        "wires": [
            [
                "49cb288e92fd91e8"
            ]
        ]
    },
    {
        "id": "49cb288e92fd91e8",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "Username/Email exists?",
        "func": "const socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userNameorEmail = msg.payload.userNameorEmail;\nconst authSettings = global.get('authSettings');\nvar authUsersNamesArray = [];\nvar authUsersEmailsArray = [];\n\n//populate an arry of with Current userNames stored in authUsers object\nauthUsersNamesArray = Object.keys(authUsers);\n//check if userSubmition is one of the userNames\nif (authUsersNamesArray.includes(userNameorEmail)) {\n    msg.error = false;\n    msg.userName = userNameorEmail;\n    return msg;\n}\n//populate an arry with Current userEmails stored in authUsers object\nauthUsersNamesArray.forEach(function(eachUserName) {\n    let eachEmail = authUsers[eachUserName].email;\n    authUsersEmailsArray.push(eachEmail);\n});\n//check if userSubmition is one of the userEmails\n//lowerCase the email submition\nvar userNameorEmailtoLowercase = userNameorEmail.toLowerCase();\nif (authUsersEmailsArray.includes(userNameorEmailtoLowercase)) {\n    //we want the userName attached to that email\n    msg.error = false;\n    //we want the userName attached to that email\n    msg.userName = authUsersNamesArray[authUsersEmailsArray.indexOf(userNameorEmailtoLowercase)];\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'Can not find Username or email';\n    msg.payload = 'Try again or create a new account';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1260,
        "wires": [
            [
                "90d3b5663f472e2b"
            ]
        ]
    },
    {
        "id": "f4ada1fa8abee9e4",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1260,
        "wires": [
            [
                "c61bd3af60b05a5e"
            ],
            [
                "8ff71cba7e6f5572"
            ]
        ]
    },
    {
        "id": "c61bd3af60b05a5e",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "8ff71cba7e6f5572",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "email Support Enabled?",
        "property": "authSettings.emailSupportEnabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 1300,
        "wires": [
            [
                "f1e7fea4ae1d8693"
            ],
            [
                "6e94372b577dda37"
            ]
        ]
    },
    {
        "id": "45a03b112e2804c1",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "random 32char string",
        "func": "function randomString(length, chars) {\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n//create a random 32 char string\nvar rString = randomString(32, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\nmsg.rString = rString;\nmsg.rStringEncrypted = rString;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1340,
        "wires": [
            [
                "4b45281ec01cbe0c"
            ]
        ]
    },
    {
        "id": "1700e38675e62efe",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "Format email with new password for user",
        "func": "var authUsers = global.get('authUsers');\nconst userName = msg.userName;\nconst rStringEncrypted = msg.rStringEncrypted\nconst rString = msg.rString;\n\n//set new password for user\nauthUsers[userName].password = rStringEncrypted;\nglobal.set('authUsers', authUsers);\n\n\n\n//format email\nmsg.to = authUsers[userName].email;\nmsg.topic = \"Account Recovery\";\nmsg.payload = \"Please login with...\"+\"\\r\\n\"+\"\\r\\n\"+\"Username: \"+userName+\"\\r\\n\"+\"Password: \"+rString+\"\\r\\n\"+\"\\r\\n\"+\"You can change the password after loggin in by going to the Account tab on the left and entering a new Password\"+\"\\r\\n\"+\"\\r\\n\"+\"Thank you!\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1340,
        "wires": [
            [
                "d071990140b9c7f6"
            ]
        ]
    },
    {
        "id": "4b45281ec01cbe0c",
        "type": "twin-bcrypt",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "",
        "action": "encrypt",
        "field": "rStringEncrypted",
        "hash": "",
        "rounds": "4",
        "x": 770,
        "y": 1340,
        "wires": [
            [
                "1700e38675e62efe"
            ]
        ]
    },
    {
        "id": "90d3b5663f472e2b",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 1260,
        "wires": [
            [
                "7a3fe3bf8d8e8262"
            ]
        ]
    },
    {
        "id": "7a3fe3bf8d8e8262",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 800,
        "y": 1260,
        "wires": [
            [
                "f4ada1fa8abee9e4"
            ]
        ]
    },
    {
        "id": "6e94372b577dda37",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "newUesrRequests & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userName = msg.userName;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        newLineInLog = 'Relative URL: /ui/#!/3 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Cant complete account recovery request - setup email to fix this | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        msg.topic = 'Warning, email support not enabled';\n        msg.payload = 'Please contact your admin about resetting your password';\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1380,
        "wires": [
            [
                "8f77b4be6042a201"
            ]
        ]
    },
    {
        "id": "8f77b4be6042a201",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 770,
        "y": 1380,
        "wires": [
            [
                "f10c74c9c8445819"
            ]
        ]
    },
    {
        "id": "f10c74c9c8445819",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage\nmsg.url = '/ui/#!/0?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Home</title></head><body>Home<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1380,
        "wires": [
            [
                "12a9a92b41c516c5"
            ]
        ]
    },
    {
        "id": "12a9a92b41c516c5",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1380,
        "wires": []
    },
    {
        "id": "d071990140b9c7f6",
        "type": "link out",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "email link out",
        "links": [
            "877b93258fb34a07"
        ],
        "x": 1215,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c14e4d201acf9333",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "Email",
        "info": "",
        "x": 1310,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f1e7fea4ae1d8693",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "newUesrRequests & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userName = msg.userName;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        newLineInLog = 'Relative URL: /ui/#!/3 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Submitted a account recovery request | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        msg.topic = 'Request Submitted';\n        msg.payload = 'Check your email tied to this account';\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1300,
        "wires": [
            [
                "45a03b112e2804c1",
                "afa2855a91c5e221"
            ]
        ]
    },
    {
        "id": "2be544d1864b1018",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1300,
        "wires": []
    },
    {
        "id": "afa2855a91c5e221",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "af2191887add8365"
            ]
        ]
    },
    {
        "id": "af2191887add8365",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "962df86914dec9af",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage\nmsg.url = '/ui/#!/0?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Home</title></head><body>Home<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1300,
        "wires": [
            [
                "2be544d1864b1018"
            ]
        ]
    },
    {
        "id": "cffec48c02a555f1",
        "type": "ui_text",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "group": "1deed69fcda2c602",
        "order": 0,
        "width": "6",
        "height": "5",
        "name": "Automation",
        "label": "",
        "format": "<h1 id=\"this-is-the-automation-page\">This is the Automation page</h1> <p>Only users that have logged in can access this page by the tab on the left of this site or directly with the <strong><em>URL</em></strong> http(s)://your-ip-address-or-domain/ui/#!/6 If a user tires to access this page or any page you have secured and they have not logged in they will be redirected to the login page.</p>",
        "layout": "col-center",
        "className": "",
        "x": 130,
        "y": 3340,
        "wires": []
    },
    {
        "id": "daacc2e93c14f22b",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "Automation Tab 6",
        "info": "",
        "x": 120,
        "y": 3300,
        "wires": []
    },
    {
        "id": "76a5ff59cbe2f003",
        "type": "ui_ui_control",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "",
        "events": "change",
        "x": 120,
        "y": 3380,
        "wires": [
            [
                "1a0680c54c8c94a9"
            ]
        ]
    },
    {
        "id": "1a0680c54c8c94a9",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 3380,
        "wires": [
            [
                "95f3d1553bf5cba8"
            ]
        ]
    },
    {
        "id": "95f3d1553bf5cba8",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "Change tab #",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 3380,
        "wires": [
            [
                "b152887edfad9926"
            ]
        ]
    },
    {
        "id": "d8b86555ca5913c7",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": " ▼Tab # here▼",
        "info": "",
        "x": 440,
        "y": 3340,
        "wires": []
    },
    {
        "id": "db99c38650c42f07",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst error = msg.error;\nconst tab = msg.tab.toString();\nconst newLineInLog = 'Relative URL: /ui/#!/' + tab +' | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + error + ` | socket - ` + socketid;\n\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n\n//clean up muiLog so it does not overflow.\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > 1000\nif (muiLogLength > 1000)\n{   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n\nmuiLog = global.get('muiLog');\n\nmsg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3420,
        "wires": [
            [
                "616debf1d957ef57"
            ]
        ]
    },
    {
        "id": "632740be00e55b73",
        "type": "comment",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "User Passed checks Do stuff",
        "info": "",
        "x": 180,
        "y": 3460,
        "wires": []
    },
    {
        "id": "616debf1d957ef57",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nconst tab = msg.tab.toString();\nconst pageURL = '/ui/#!/' + tab;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 3420,
        "wires": [
            [
                "cb5f2af957bda590"
            ]
        ]
    },
    {
        "id": "cb5f2af957bda590",
        "type": "ui_toast",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1090,
        "y": 3420,
        "wires": []
    },
    {
        "id": "b152887edfad9926",
        "type": "change",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 3380,
        "wires": [
            [
                "5b34202fd14beff9"
            ]
        ]
    },
    {
        "id": "5b34202fd14beff9",
        "type": "moment",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 840,
        "y": 3380,
        "wires": [
            [
                "032f5091444cb25f"
            ]
        ]
    },
    {
        "id": "032f5091444cb25f",
        "type": "function",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "Is user logged in?",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\n//Get AuthLoginCredentials else create it\nconst AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar isuerloggedin = false;\nvar error = 'User not logged in';\n\n\n//check that loggedin is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].loggedin === true) {\n        isuerloggedin = true;\n        //get user information from AuthLoginCredentials\n        var ip = AuthLoginCredentials[socketid].ip;\n        var userName = AuthLoginCredentials[socketid].userName;\n        var email = AuthLoginCredentials[socketid].email;\n        var role = AuthLoginCredentials[socketid].role;\n        var firstname = AuthLoginCredentials[socketid].firstname;\n        var lastname = AuthLoginCredentials[socketid].lastname;\n        var info = AuthLoginCredentials[socketid].info;\n        //if the ip that the user logged in with\n        //that is tied to the socketid of that login\n        //is diffrent then the ip used to get to this page\n        //kick the record and send user back to login page\n        if(ip !== socketip) {\n            delete AuthLoginCredentials[socketid];\n            error = 'socketip: '+socketip+' !== to Login ip: '+ip;\n            msg.error = error;\n            isuerloggedin = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n        else {\n            msg.error = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n    }\n    else {\n        msg.error = error;\n        msg.isuerloggedin = isuerloggedin;\n        return msg;\n    }\n}\nelse {\n    msg.error = error;\n    msg.isuerloggedin = isuerloggedin;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 3380,
        "wires": [
            [
                "3c46b39f1d36d6e3"
            ]
        ]
    },
    {
        "id": "3c46b39f1d36d6e3",
        "type": "switch",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "1[not logged in] 2[logged in]",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 3420,
        "wires": [
            [
                "db99c38650c42f07"
            ],
            [
                "1dcf80ab4cec30d4"
            ]
        ]
    },
    {
        "id": "1dcf80ab4cec30d4",
        "type": "debug",
        "z": "1b02f0fe7a46b56d",
        "g": "73706228b7209d71",
        "name": "USER SUCCESS | logged in | trigger stuff on the page etc",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 3500,
        "wires": []
    },
    {
        "id": "f5f7cada415a15e8",
        "type": "ui_group",
        "name": "Default",
        "tab": "ec70d3e1d8e28a85",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "62b44eba9c39b679",
        "type": "ui_group",
        "name": "Default",
        "tab": "fbb415f26719d009",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "205ac72e296cb65f",
        "type": "ui_group",
        "name": "Default",
        "tab": "485947d907328db6",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc7d7ea92ffb628f",
        "type": "ui_group",
        "name": "Default",
        "tab": "6b7ffc5fefd10686",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a40bb0d9c16471df",
        "type": "ui_group",
        "name": "Default",
        "tab": "8ac8d513b2bb46ad",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1deed69fcda2c602",
        "type": "ui_group",
        "name": "Default",
        "tab": "99302245b859db2f",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ec70d3e1d8e28a85",
        "type": "ui_tab",
        "name": "Login",
        "icon": "lock",
        "order": 2,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "fbb415f26719d009",
        "type": "ui_tab",
        "name": "New Account",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "485947d907328db6",
        "type": "ui_tab",
        "name": "Account",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6b7ffc5fefd10686",
        "type": "ui_tab",
        "name": "Admin",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "8ac8d513b2bb46ad",
        "type": "ui_tab",
        "name": "AccountRecovery",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "99302245b859db2f",
        "type": "ui_tab",
        "d": true,
        "name": "Automation",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    }
]